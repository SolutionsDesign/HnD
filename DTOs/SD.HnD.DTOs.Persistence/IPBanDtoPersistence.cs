//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.11.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SD.LLBLGen.Pro.QuerySpec;
using SD.HnD.DALAdapter.HelperClasses;
using SD.LLBLGen.Pro.LinqSupportClasses;
using SD.LLBLGen.Pro.LinqSupportClasses.DTOProjectionHelpers;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DTOs.Persistence
{

	/// <summary>Static class for (extension) methods for fetching and projecting instances of SD.HnD.DTOs.DtoClasses.IPBanDto from / to the entity model.</summary>
	public static partial class IPBanPersistence
	{
		private static readonly System.Linq.Expressions.Expression<Func<SD.HnD.DALAdapter.EntityClasses.IPBanEntity, SD.HnD.DTOs.DtoClasses.IPBanDto>> _projectorExpression = CreateProjectionFunc();
		private static readonly Func<SD.HnD.DALAdapter.EntityClasses.IPBanEntity, SD.HnD.DTOs.DtoClasses.IPBanDto> _compiledProjector = CreateProjectionFunc().Compile();
		/// <summary>Linq specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToIPBanDto(System.Linq.IQueryable{SD.HnD.DALAdapter.EntityClasses.IPBanEntity})"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="CreateProjectionFunc"/></param>
		/// <remarks>Linq specific</remarks>
		static partial void GetAdjustmentsForProjectToIPBanDto(ref System.Linq.Expressions.Expression<Func<SD.HnD.DALAdapter.EntityClasses.IPBanEntity, SD.HnD.DTOs.DtoClasses.IPBanDto>> projectionAdjustments);
		/// <summary>QuerySpec specific partial method for obtaining projection adjustments for the projection method <see cref="ProjectToIPBanDto(EntityQuery{SD.HnD.DALAdapter.EntityClasses.IPBanEntity}, SD.HnD.DALAdapter.FactoryClasses.QueryFactory)"/></summary>
		/// <param name="projectionAdjustments">Set this argument in an implementation of this partial method to a projection lambda similar to the generated projection in <see cref="ProjectToIPBanDto(EntityQuery{SD.HnD.DALAdapter.EntityClasses.IPBanEntity}, SD.HnD.DALAdapter.FactoryClasses.QueryFactory)"/></param>
		/// <remarks>QuerySpec specific</remarks>
		static partial void GetAdjustmentsForProjectToIPBanDtoQs(ref System.Linq.Expressions.Expression<Func<SD.HnD.DTOs.DtoClasses.IPBanDto>> projectionAdjustments);
	
		/// <summary>Empty static ctor for triggering initialization of static members in a thread-safe manner</summary>
		static IPBanPersistence() { }
	
		/// <summary>Extension method which produces a projection to SD.HnD.DTOs.DtoClasses.IPBanDto which instances are projected from the results of the specified baseQuery, which returns SD.HnD.DALAdapter.EntityClasses.IPBanEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <returns>IQueryable to retrieve SD.HnD.DTOs.DtoClasses.IPBanDto instances</returns>
		public static IQueryable<SD.HnD.DTOs.DtoClasses.IPBanDto> ProjectToIPBanDto(this IQueryable<SD.HnD.DALAdapter.EntityClasses.IPBanEntity> baseQuery)
		{
			return baseQuery.Select(_projectorExpression);
		}

		/// <summary>Extension method which produces a projection to SD.HnD.DTOs.DtoClasses.IPBanDto which instances are projected from the results of the specified baseQuery using QuerySpec, which returns SD.HnD.DALAdapter.EntityClasses.IPBanEntity instances, the root entity of the derived element returned by this query.</summary>
		/// <param name="baseQuery">The base query to project the derived element instances from.</param>
		/// <param name="qf">The query factory used to create baseQuery.</param>
		/// <returns>DynamicQuery to retrieve SD.HnD.DTOs.DtoClasses.IPBanDto instances</returns>
		public static DynamicQuery<SD.HnD.DTOs.DtoClasses.IPBanDto> ProjectToIPBanDto(this EntityQuery<SD.HnD.DALAdapter.EntityClasses.IPBanEntity> baseQuery, SD.HnD.DALAdapter.FactoryClasses.QueryFactory qf)
		{
			System.Linq.Expressions.Expression<Func<SD.HnD.DTOs.DtoClasses.IPBanDto>> projectionAdjustments = null;
			GetAdjustmentsForProjectToIPBanDtoQs(ref projectionAdjustments);
			return qf.Create()
				.From(baseQuery.Select(Projection.Full).As("__BQ")
					.InnerJoin(qf.User.As("__L0_0")).On(IPBanFields.IPBanSetByUserID.Source("__BQ").Equal(UserFields.UserID.Source("__L0_0"))))
				.Select(LinqUtils.MergeProjectionAdjustmentsIntoProjection(() => new SD.HnD.DTOs.DtoClasses.IPBanDto()
				{
					IPBanID = IPBanFields.IPBanID.Source("__BQ").ToValue<System.Int32>(),
					IPBanSetByUserID = IPBanFields.IPBanSetByUserID.Source("__BQ").ToValue<System.Int32>(),
					IPBanSetOn = IPBanFields.IPBanSetOn.Source("__BQ").ToValue<System.DateTime>(),
					IPSegment1 = IPBanFields.IPSegment1.Source("__BQ").ToValue<System.Byte>(),
					IPSegment2 = IPBanFields.IPSegment2.Source("__BQ").ToValue<System.Byte>(),
					IPSegment3 = IPBanFields.IPSegment3.Source("__BQ").ToValue<System.Byte>(),
					IPSegment4 = IPBanFields.IPSegment4.Source("__BQ").ToValue<System.Byte>(),
					Range = IPBanFields.Range.Source("__BQ").ToValue<System.Byte>(),
					Reason = IPBanFields.Reason.Source("__BQ").ToValue<System.String>(),
					SetByUserNickName = UserFields.NickName.Source("__L0_0").ToValue<System.String>(),
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegionQS_IPBan 
	// __LLBLGENPRO_USER_CODE_REGION_END 
				}, projectionAdjustments, false));
		}

		/// <summary>Extension method which produces a projection to SD.HnD.DTOs.DtoClasses.IPBanDto which instances are projected from the SD.HnD.DALAdapter.EntityClasses.IPBanEntity entity instance specified, the root entity of the derived element returned by this method.</summary>
		/// <param name="entity">The entity to project from.</param>
		/// <returns>SD.HnD.DALAdapter.EntityClasses.IPBanEntity instance created from the specified entity instance</returns>
		public static SD.HnD.DTOs.DtoClasses.IPBanDto ProjectToIPBanDto(this SD.HnD.DALAdapter.EntityClasses.IPBanEntity entity)
		{
			return _compiledProjector(entity);
		}

		private static System.Linq.Expressions.Expression<Func<SD.HnD.DALAdapter.EntityClasses.IPBanEntity, SD.HnD.DTOs.DtoClasses.IPBanDto>> CreateProjectionFunc()
		{
			System.Linq.Expressions.Expression<Func<SD.HnD.DALAdapter.EntityClasses.IPBanEntity, SD.HnD.DTOs.DtoClasses.IPBanDto>> mainProjection = p__0 => new SD.HnD.DTOs.DtoClasses.IPBanDto()
			{
				IPBanID = p__0.IPBanID,
				IPBanSetByUserID = p__0.IPBanSetByUserID,
				IPBanSetOn = p__0.IPBanSetOn,
				IPSegment1 = p__0.IPSegment1,
				IPSegment2 = p__0.IPSegment2,
				IPSegment3 = p__0.IPSegment3,
				IPSegment4 = p__0.IPSegment4,
				Range = p__0.Range,
				Reason = p__0.Reason,
				SetByUserNickName = p__0.SetByUser.NickName,
	// __LLBLGENPRO_USER_CODE_REGION_START ProjectionRegion_IPBan 
	// __LLBLGENPRO_USER_CODE_REGION_END 
			};
			System.Linq.Expressions.Expression<Func<SD.HnD.DALAdapter.EntityClasses.IPBanEntity, SD.HnD.DTOs.DtoClasses.IPBanDto>> projectionAdjustments = null;
			GetAdjustmentsForProjectToIPBanDto(ref projectionAdjustments);
			return LinqUtils.MergeProjectionAdjustmentsIntoProjection(mainProjection, projectionAdjustments, true);
		}
		/// <summary>Creates a primary key predicate to be used in a Where() clause in a Linq query which is executed on the database to fetch the original entity instance the specified <see cref="dto"/> object was projected from.</summary>
		/// <param name="dto">The dto object for which the primary key predicate has to be created for.</param>
		/// <returns>ready to use expression</returns>
		public static System.Linq.Expressions.Expression<Func<SD.HnD.DALAdapter.EntityClasses.IPBanEntity, bool>> CreatePkPredicate(SD.HnD.DTOs.DtoClasses.IPBanDto dto)
		{
			return p__0 => p__0.IPBanID == dto.IPBanID;
		}

		/// <summary>Creates a primary key predicate to be used in a Where() clause in a Linq query which is executed on the database to fetch the original entity instances the specified set of <see cref="dtos"/> objects was projected from.</summary>
		/// <param name="dtos">The dto objects for which the primary key predicate has to be created for.</param>
		/// <returns>ready to use expression</returns>
		public static System.Linq.Expressions.Expression<Func<SD.HnD.DALAdapter.EntityClasses.IPBanEntity, bool>> CreatePkPredicate(IEnumerable<SD.HnD.DTOs.DtoClasses.IPBanDto> dtos)
		{
			return p__0 => dtos.Select(p__1=>p__1.IPBanID).ToList().Contains(p__0.IPBanID);
		}

		/// <summary>Creates a primary key predicate to be used in a Where() clause in a Linq query on an IEnumerable in-memory set of entity instances to retrieve the original entity instance the specified <see cref="dto"/> object was projected from.</summary>
		/// <param name="dto">The dto object for which the primary key predicate has to be created for.</param>
		/// <returns>ready to use func</returns>
		public static Func<SD.HnD.DALAdapter.EntityClasses.IPBanEntity, bool> CreateInMemoryPkPredicate(SD.HnD.DTOs.DtoClasses.IPBanDto dto)
		{
			return p__0 => p__0.IPBanID == dto.IPBanID;
		}
		
		/// <summary>Updates the specified SD.HnD.DALAdapter.EntityClasses.IPBanEntity entity with the values stored in the dto object specified</summary>
		/// <param name="toUpdate">the entity instance to update.</param>
		/// <param name="dto">The dto object containing the source values.</param>
		/// <remarks>The PK field of toUpdate is set only if it's not marked as readonly.</remarks>
		public static void UpdateFromIPBan(this SD.HnD.DALAdapter.EntityClasses.IPBanEntity toUpdate, SD.HnD.DTOs.DtoClasses.IPBanDto dto)
		{
			if((toUpdate == null) || (dto == null))
			{
				return;
			}
			toUpdate.IPBanSetByUserID = dto.IPBanSetByUserID;
			toUpdate.IPBanSetOn = dto.IPBanSetOn;
			toUpdate.IPSegment1 = dto.IPSegment1;
			toUpdate.IPSegment2 = dto.IPSegment2;
			toUpdate.IPSegment3 = dto.IPSegment3;
			toUpdate.IPSegment4 = dto.IPSegment4;
			toUpdate.Range = dto.Range;
			toUpdate.Reason = dto.Reason;
		}
	}
}


 