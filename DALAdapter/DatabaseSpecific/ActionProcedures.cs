//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.DatabaseSpecific
{
	/// <summary>Class which contains the static logic to execute action stored procedures in the database.</summary>
	public static partial class ActionProcedures
	{
		/// <summary>Delegate definition for stored procedure 'pr_Install' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int InstallCallBack(System.String adminEmailAddress, System.String adminPasswordHashed, IDataAccessCore dataAccessProvider);

		/// <summary>Calls stored procedure 'pr_Install'.<br/><br/></summary>
		/// <param name="adminEmailAddress">Input parameter. </param>
		/// <param name="adminPasswordHashed">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int Install(System.String adminEmailAddress, System.String adminPasswordHashed)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return Install(adminEmailAddress, adminPasswordHashed, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'pr_Install'.<br/><br/></summary>
		/// <param name="adminEmailAddress">Input parameter. </param>
		/// <param name="adminPasswordHashed">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int Install(System.String adminEmailAddress, System.String adminPasswordHashed, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateInstallCall(dataAccessProvider, adminEmailAddress, adminPasswordHashed))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'pr_Install'. Async variant<br/><br/></summary>
		/// <param name="adminEmailAddress">Input parameter. </param>
		/// <param name="adminPasswordHashed">Input parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> InstallAsync(System.String adminEmailAddress, System.String adminPasswordHashed, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await InstallAsync(adminEmailAddress, adminPasswordHashed, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'pr_Install'. Async variant<br/><br/></summary>
		/// <param name="adminEmailAddress">Input parameter. </param>
		/// <param name="adminPasswordHashed">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> InstallAsync(System.String adminEmailAddress, System.String adminPasswordHashed, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateInstallCall(dataAccessProvider, adminEmailAddress, adminPasswordHashed))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				return _procReturnValue;
			}
		}

		/// <summary>Creates the call object for the call 'Install' to stored procedure 'pr_Install'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="adminEmailAddress">Input parameter</param>
		/// <param name="adminPasswordHashed">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateInstallCall(IDataAccessCore dataAccessProvider, System.String adminEmailAddress, System.String adminPasswordHashed)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[HnD].[dbo].[pr_Install]", "Install")
							.AddParameter("@sAdminEmailAddress", "NVarChar", 150, ParameterDirection.Input, true, 0, 0, adminEmailAddress)
							.AddParameter("@sAdminPasswordHashed", "NVarChar", 128, ParameterDirection.Input, true, 0, 0, adminPasswordHashed);
		}


	}
}
