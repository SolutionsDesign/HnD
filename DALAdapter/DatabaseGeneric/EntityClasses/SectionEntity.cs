//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.HnD.DALAdapter.HelperClasses;
using SD.HnD.DALAdapter.FactoryClasses;
using SD.HnD.DALAdapter.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Section'.<br/><br/></summary>
	[Serializable]
	public partial class SectionEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<ForumEntity> _forums;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static SectionEntityStaticMetaData _staticMetaData = new SectionEntityStaticMetaData();
		private static SectionRelations _relationsFactory = new SectionRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Forums</summary>
			public static readonly string Forums = "Forums";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class SectionEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public SectionEntityStaticMetaData()
			{
				SetEntityCoreInfo("SectionEntity", InheritanceHierarchyType.None, false, (int)SD.HnD.DALAdapter.EntityType.SectionEntity, typeof(SectionEntity), typeof(SectionEntityFactory), false);
				AddNavigatorMetaData<SectionEntity, EntityCollection<ForumEntity>>("Forums", a => a._forums, (a, b) => a._forums = b, a => a.Forums, () => new SectionRelations().ForumEntityUsingSectionID, typeof(ForumEntity), (int)SD.HnD.DALAdapter.EntityType.ForumEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static SectionEntity()
		{
		}

		/// <summary> CTor</summary>
		public SectionEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public SectionEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this SectionEntity</param>
		public SectionEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="sectionID">PK value for Section which data should be fetched into this Section object</param>
		public SectionEntity(System.Int32 sectionID) : this(sectionID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="sectionID">PK value for Section which data should be fetched into this Section object</param>
		/// <param name="validator">The custom validator object for this SectionEntity</param>
		public SectionEntity(System.Int32 sectionID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.SectionID = sectionID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected SectionEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Forum' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoForums() { return CreateRelationInfoForNavigator("Forums"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this SectionEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static SectionRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Forum' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathForums { get { return _staticMetaData.GetPrefetchPathElement("Forums", CommonEntityBase.CreateEntityCollection<ForumEntity>()); } }

		/// <summary>The SectionID property of the Entity Section<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Section"."SectionID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		[Required]
		public virtual System.Int32 SectionID
		{
			get { return (System.Int32)GetValue((int)SectionFieldIndex.SectionID, true); }
			set { SetValue((int)SectionFieldIndex.SectionID, value); }		}

		/// <summary>The SectionName property of the Entity Section<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Section"."SectionName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		[StringLength(50)]
		[MinLength(2)]
		public virtual System.String SectionName
		{
			get { return (System.String)GetValue((int)SectionFieldIndex.SectionName, true); }
			set	{ SetValue((int)SectionFieldIndex.SectionName, value); }
		}

		/// <summary>The SectionDescription property of the Entity Section<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Section"."SectionDescription".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 250.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		[StringLength(250)]
		[MinLength(2)]
		public virtual System.String SectionDescription
		{
			get { return (System.String)GetValue((int)SectionFieldIndex.SectionDescription, true); }
			set	{ SetValue((int)SectionFieldIndex.SectionDescription, value); }
		}

		/// <summary>The OrderNo property of the Entity Section<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Section"."OrderNo".<br/>Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.Int16 OrderNo
		{
			get { return (System.Int16)GetValue((int)SectionFieldIndex.OrderNo, true); }
			set	{ SetValue((int)SectionFieldIndex.OrderNo, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ForumEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ForumEntity))]
		public virtual EntityCollection<ForumEntity> Forums { get { return GetOrCreateEntityCollection<ForumEntity, ForumEntityFactory>("Section", true, false, ref _forums); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.HnD.DALAdapter
{
	public enum SectionFieldIndex
	{
		///<summary>SectionID. </summary>
		SectionID,
		///<summary>SectionName. </summary>
		SectionName,
		///<summary>SectionDescription. </summary>
		SectionDescription,
		///<summary>OrderNo. </summary>
		OrderNo,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.HnD.DALAdapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Section. </summary>
	public partial class SectionRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between SectionEntity and ForumEntity over the 1:n relation they have, using the relation between the fields: Section.SectionID - Forum.SectionID</summary>
		public virtual IEntityRelation ForumEntityUsingSectionID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Forums", true, new[] { SectionFields.SectionID, ForumFields.SectionID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticSectionRelations
	{
		internal static readonly IEntityRelation ForumEntityUsingSectionIDStatic = new SectionRelations().ForumEntityUsingSectionID;

		/// <summary>CTor</summary>
		static StaticSectionRelations() { }
	}
}
