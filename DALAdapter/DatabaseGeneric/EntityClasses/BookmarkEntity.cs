//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.HnD.DALAdapter.HelperClasses;
using SD.HnD.DALAdapter.FactoryClasses;
using SD.HnD.DALAdapter.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Bookmark'.<br/><br/></summary>
	[Serializable]
	public partial class BookmarkEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private ThreadEntity _thread;
		private UserEntity _user;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static BookmarkEntityStaticMetaData _staticMetaData = new BookmarkEntityStaticMetaData();
		private static BookmarkRelations _relationsFactory = new BookmarkRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Thread</summary>
			public static readonly string Thread = "Thread";
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class BookmarkEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public BookmarkEntityStaticMetaData()
			{
				SetEntityCoreInfo("BookmarkEntity", InheritanceHierarchyType.None, false, (int)SD.HnD.DALAdapter.EntityType.BookmarkEntity, typeof(BookmarkEntity), typeof(BookmarkEntityFactory), false);
				AddNavigatorMetaData<BookmarkEntity, ThreadEntity>("Thread", "PresentInBookmarks", (a, b) => a._thread = b, a => a._thread, (a, b) => a.Thread = b, SD.HnD.DALAdapter.RelationClasses.StaticBookmarkRelations.ThreadEntityUsingThreadIDStatic, ()=>new BookmarkRelations().ThreadEntityUsingThreadID, null, new int[] { (int)BookmarkFieldIndex.ThreadID }, null, true, (int)SD.HnD.DALAdapter.EntityType.ThreadEntity);
				AddNavigatorMetaData<BookmarkEntity, UserEntity>("User", "Bookmarks", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, SD.HnD.DALAdapter.RelationClasses.StaticBookmarkRelations.UserEntityUsingUserIDStatic, ()=>new BookmarkRelations().UserEntityUsingUserID, null, new int[] { (int)BookmarkFieldIndex.UserID }, null, true, (int)SD.HnD.DALAdapter.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static BookmarkEntity()
		{
		}

		/// <summary> CTor</summary>
		public BookmarkEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public BookmarkEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this BookmarkEntity</param>
		public BookmarkEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="threadID">PK value for Bookmark which data should be fetched into this Bookmark object</param>
		/// <param name="userID">PK value for Bookmark which data should be fetched into this Bookmark object</param>
		public BookmarkEntity(System.Int32 threadID, System.Int32 userID) : this(threadID, userID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="threadID">PK value for Bookmark which data should be fetched into this Bookmark object</param>
		/// <param name="userID">PK value for Bookmark which data should be fetched into this Bookmark object</param>
		/// <param name="validator">The custom validator object for this BookmarkEntity</param>
		public BookmarkEntity(System.Int32 threadID, System.Int32 userID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.ThreadID = threadID;
			this.UserID = userID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected BookmarkEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Thread' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoThread() { return CreateRelationInfoForNavigator("Thread"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this BookmarkEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static BookmarkRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Thread' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathThread { get { return _staticMetaData.GetPrefetchPathElement("Thread", CommonEntityBase.CreateEntityCollection<ThreadEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The ThreadID property of the Entity Bookmark<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Bookmark"."ThreadID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		[Required]
		public virtual System.Int32 ThreadID
		{
			get { return (System.Int32)GetValue((int)BookmarkFieldIndex.ThreadID, true); }
			set	{ SetValue((int)BookmarkFieldIndex.ThreadID, value); }
		}

		/// <summary>The UserID property of the Entity Bookmark<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Bookmark"."UserID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		[Required]
		public virtual System.Int32 UserID
		{
			get { return (System.Int32)GetValue((int)BookmarkFieldIndex.UserID, true); }
			set	{ SetValue((int)BookmarkFieldIndex.UserID, value); }
		}

		/// <summary>Gets / sets related entity of type 'ThreadEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual ThreadEntity Thread
		{
			get { return _thread; }
			set { SetSingleRelatedEntityNavigator(value, "Thread"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.HnD.DALAdapter
{
	public enum BookmarkFieldIndex
	{
		///<summary>ThreadID. </summary>
		ThreadID,
		///<summary>UserID. </summary>
		UserID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.HnD.DALAdapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Bookmark. </summary>
	public partial class BookmarkRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between BookmarkEntity and ThreadEntity over the m:1 relation they have, using the relation between the fields: Bookmark.ThreadID - Thread.ThreadID</summary>
		public virtual IEntityRelation ThreadEntityUsingThreadID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Thread", false, new[] { ThreadFields.ThreadID, BookmarkFields.ThreadID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between BookmarkEntity and UserEntity over the m:1 relation they have, using the relation between the fields: Bookmark.UserID - User.UserID</summary>
		public virtual IEntityRelation UserEntityUsingUserID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.UserID, BookmarkFields.UserID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticBookmarkRelations
	{
		internal static readonly IEntityRelation ThreadEntityUsingThreadIDStatic = new BookmarkRelations().ThreadEntityUsingThreadID;
		internal static readonly IEntityRelation UserEntityUsingUserIDStatic = new BookmarkRelations().UserEntityUsingUserID;

		/// <summary>CTor</summary>
		static StaticBookmarkRelations() { }
	}
}
