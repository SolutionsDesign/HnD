//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.HnD.DALAdapter.HelperClasses;
using SD.HnD.DALAdapter.FactoryClasses;
using SD.HnD.DALAdapter.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'AuditDataMessageRelated'.<br/><br/></summary>
	[Serializable]
	public partial class AuditDataMessageRelatedEntity : AuditDataCoreEntity
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private MessageEntity _message;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static AuditDataMessageRelatedEntityStaticMetaData _staticMetaData = new AuditDataMessageRelatedEntityStaticMetaData();
		private static AuditDataMessageRelatedRelations _relationsFactory = new AuditDataMessageRelatedRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public new static partial class MemberNames
		{
			/// <summary>Member name AuditAction</summary>
			public static readonly string AuditAction = "AuditAction";
			/// <summary>Member name Message</summary>
			public static readonly string Message = "Message";
			/// <summary>Member name UserAudited</summary>
			public static readonly string UserAudited = "UserAudited";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AuditDataMessageRelatedEntityStaticMetaData : AuditDataCoreEntityStaticMetaData
		{
			public AuditDataMessageRelatedEntityStaticMetaData()
			{
				SetEntityCoreInfo("AuditDataMessageRelatedEntity", InheritanceHierarchyType.TargetPerEntity, true, (int)SD.HnD.DALAdapter.EntityType.AuditDataMessageRelatedEntity, typeof(AuditDataMessageRelatedEntity), typeof(AuditDataMessageRelatedEntityFactory), false);
				AddNavigatorMetaData<AuditDataMessageRelatedEntity, MessageEntity>("Message", "AuditDataMessageRelated", (a, b) => a._message = b, a => a._message, (a, b) => a.Message = b, SD.HnD.DALAdapter.RelationClasses.StaticAuditDataMessageRelatedRelations.MessageEntityUsingMessageIDStatic, ()=>new AuditDataMessageRelatedRelations().MessageEntityUsingMessageID, null, new int[] { (int)AuditDataMessageRelatedFieldIndex.MessageID }, null, true, (int)SD.HnD.DALAdapter.EntityType.MessageEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AuditDataMessageRelatedEntity()
		{
		}

		/// <summary> CTor</summary>
		public AuditDataMessageRelatedEntity()
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AuditDataMessageRelatedEntity(IEntityFields2 fields) : base(fields)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AuditDataMessageRelatedEntity</param>
		public AuditDataMessageRelatedEntity(IValidator validator) : base(validator)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="auditDataID">PK value for AuditDataMessageRelated which data should be fetched into this AuditDataMessageRelated object</param>
		public AuditDataMessageRelatedEntity(System.Int32 auditDataID) : base(auditDataID)
		{
			InitClassEmpty();
		}

		/// <summary> CTor</summary>
		/// <param name="auditDataID">PK value for AuditDataMessageRelated which data should be fetched into this AuditDataMessageRelated object</param>
		/// <param name="validator">The custom validator object for this AuditDataMessageRelatedEntity</param>
		public AuditDataMessageRelatedEntity(System.Int32 auditDataID, IValidator validator) : base(auditDataID, validator)
		{
			InitClassEmpty();
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AuditDataMessageRelatedEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Gets a predicateexpression which filters on this entity. Only useful in entity fetches</summary>
		/// <param name="negate">Optional flag to produce a NOT filter, (true), or a normal filter (false, default). </param>
		/// <returns>ready to use predicateexpression</returns>
		public new static IPredicateExpression GetEntityTypeFilter(bool negate=false) { return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter("AuditDataMessageRelatedEntity", negate); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Message' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoMessage() { return CreateRelationInfoForNavigator("Message"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{

			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		private void InitClassEmpty()
		{
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public new static AuditDataMessageRelatedRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Message' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathMessage { get { return _staticMetaData.GetPrefetchPathElement("Message", CommonEntityBase.CreateEntityCollection<MessageEntity>()); } }

		/// <summary>The MessageID property of the Entity AuditDataMessageRelated<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditDataMessageRelated"."MessageID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.Int32 MessageID
		{
			get { return (System.Int32)GetValue((int)AuditDataMessageRelatedFieldIndex.MessageID, true); }
			set	{ SetValue((int)AuditDataMessageRelatedFieldIndex.MessageID, value); }
		}

		/// <summary>Gets / sets related entity of type 'MessageEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual MessageEntity Message
		{
			get { return _message; }
			set { SetSingleRelatedEntityNavigator(value, "Message"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.HnD.DALAdapter
{
	public enum AuditDataMessageRelatedFieldIndex
	{
		///<summary>AuditDataID. Inherited from AuditDataCore</summary>
		AuditDataID_AuditDataCore,
		///<summary>AuditActionID. Inherited from AuditDataCore</summary>
		AuditActionID,
		///<summary>UserID. Inherited from AuditDataCore</summary>
		UserID,
		///<summary>AuditedOn. Inherited from AuditDataCore</summary>
		AuditedOn,
		///<summary>AuditDataID. </summary>
		AuditDataID,
		///<summary>MessageID. </summary>
		MessageID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.HnD.DALAdapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: AuditDataMessageRelated. </summary>
	public partial class AuditDataMessageRelatedRelations: AuditDataCoreRelations
	{

		/// <summary>Returns a new IEntityRelation object, between AuditDataMessageRelatedEntity and AuditActionEntity over the m:1 relation they have, using the relation between the fields: AuditDataMessageRelated.AuditActionID - AuditAction.AuditActionID</summary>
		public override IEntityRelation AuditActionEntityUsingAuditActionID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "AuditAction", false, new[] { AuditActionFields.AuditActionID, AuditDataMessageRelatedFields.AuditActionID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AuditDataMessageRelatedEntity and MessageEntity over the m:1 relation they have, using the relation between the fields: AuditDataMessageRelated.MessageID - Message.MessageID</summary>
		public virtual IEntityRelation MessageEntityUsingMessageID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Message", false, new[] { MessageFields.MessageID, AuditDataMessageRelatedFields.MessageID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AuditDataMessageRelatedEntity and UserEntity over the m:1 relation they have, using the relation between the fields: AuditDataMessageRelated.UserID - User.UserID</summary>
		public override IEntityRelation UserEntityUsingUserID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "UserAudited", false, new[] { UserFields.UserID, AuditDataMessageRelatedFields.UserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AuditDataMessageRelatedEntity and AuditDataCoreEntity over the 1:1 relation they have, which is used to build a target per entity hierarchy</summary>
		internal IEntityRelation RelationToSuperTypeAuditDataCoreEntity
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateHierarchyRelation(false, new[] { AuditDataCoreFields.AuditDataID, AuditDataMessageRelatedFields.AuditDataID }); }
		}

		/// <inheritdoc/>
		public override IEntityRelation GetSubTypeRelation(string subTypeEntityName)
		{
			return null;
		}
		
		/// <inheritdoc/>
		public override IEntityRelation GetSuperTypeRelation()	{ return this.RelationToSuperTypeAuditDataCoreEntity; }

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAuditDataMessageRelatedRelations
	{
		internal static readonly IEntityRelation AuditActionEntityUsingAuditActionIDStatic = new AuditDataMessageRelatedRelations().AuditActionEntityUsingAuditActionID;
		internal static readonly IEntityRelation MessageEntityUsingMessageIDStatic = new AuditDataMessageRelatedRelations().MessageEntityUsingMessageID;
		internal static readonly IEntityRelation UserEntityUsingUserIDStatic = new AuditDataMessageRelatedRelations().UserEntityUsingUserID;

		/// <summary>CTor</summary>
		static StaticAuditDataMessageRelatedRelations() { }
	}
}
