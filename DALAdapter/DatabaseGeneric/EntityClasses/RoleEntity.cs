//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.HnD.DALAdapter.HelperClasses;
using SD.HnD.DALAdapter.FactoryClasses;
using SD.HnD.DALAdapter.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Role'.<br/><br/></summary>
	[Serializable]
	public partial class RoleEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<ForumRoleForumActionRightEntity> _forumRoleForumActionRights;
		private EntityCollection<RoleAuditActionEntity> _roleAuditAction;
		private EntityCollection<RoleSystemActionRightEntity> _roleSystemActionRights;
		private EntityCollection<RoleUserEntity> _roleUser;
		private EntityCollection<SystemDataEntity> _systemDataAnonymousRole;
		private EntityCollection<SystemDataEntity> _systemDataDefaultRoleNewUser;
		private EntityCollection<ActionRightEntity> _assignedSystemActionRights;
		private EntityCollection<AuditActionEntity> _assignedAuditActions;
		private EntityCollection<UserEntity> _users;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static RoleEntityStaticMetaData _staticMetaData = new RoleEntityStaticMetaData();
		private static RoleRelations _relationsFactory = new RoleRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name ForumRoleForumActionRights</summary>
			public static readonly string ForumRoleForumActionRights = "ForumRoleForumActionRights";
			/// <summary>Member name RoleAuditAction</summary>
			public static readonly string RoleAuditAction = "RoleAuditAction";
			/// <summary>Member name RoleSystemActionRights</summary>
			public static readonly string RoleSystemActionRights = "RoleSystemActionRights";
			/// <summary>Member name RoleUser</summary>
			public static readonly string RoleUser = "RoleUser";
			/// <summary>Member name SystemDataAnonymousRole</summary>
			public static readonly string SystemDataAnonymousRole = "SystemDataAnonymousRole";
			/// <summary>Member name SystemDataDefaultRoleNewUser</summary>
			public static readonly string SystemDataDefaultRoleNewUser = "SystemDataDefaultRoleNewUser";
			/// <summary>Member name AssignedSystemActionRights</summary>
			public static readonly string AssignedSystemActionRights = "AssignedSystemActionRights";
			/// <summary>Member name AssignedAuditActions</summary>
			public static readonly string AssignedAuditActions = "AssignedAuditActions";
			/// <summary>Member name Users</summary>
			public static readonly string Users = "Users";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class RoleEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public RoleEntityStaticMetaData()
			{
				SetEntityCoreInfo("RoleEntity", InheritanceHierarchyType.None, false, (int)SD.HnD.DALAdapter.EntityType.RoleEntity, typeof(RoleEntity), typeof(RoleEntityFactory), false);
				AddNavigatorMetaData<RoleEntity, EntityCollection<ForumRoleForumActionRightEntity>>("ForumRoleForumActionRights", a => a._forumRoleForumActionRights, (a, b) => a._forumRoleForumActionRights = b, a => a.ForumRoleForumActionRights, () => new RoleRelations().ForumRoleForumActionRightEntityUsingRoleID, typeof(ForumRoleForumActionRightEntity), (int)SD.HnD.DALAdapter.EntityType.ForumRoleForumActionRightEntity);
				AddNavigatorMetaData<RoleEntity, EntityCollection<RoleAuditActionEntity>>("RoleAuditAction", a => a._roleAuditAction, (a, b) => a._roleAuditAction = b, a => a.RoleAuditAction, () => new RoleRelations().RoleAuditActionEntityUsingRoleID, typeof(RoleAuditActionEntity), (int)SD.HnD.DALAdapter.EntityType.RoleAuditActionEntity);
				AddNavigatorMetaData<RoleEntity, EntityCollection<RoleSystemActionRightEntity>>("RoleSystemActionRights", a => a._roleSystemActionRights, (a, b) => a._roleSystemActionRights = b, a => a.RoleSystemActionRights, () => new RoleRelations().RoleSystemActionRightEntityUsingRoleID, typeof(RoleSystemActionRightEntity), (int)SD.HnD.DALAdapter.EntityType.RoleSystemActionRightEntity);
				AddNavigatorMetaData<RoleEntity, EntityCollection<RoleUserEntity>>("RoleUser", a => a._roleUser, (a, b) => a._roleUser = b, a => a.RoleUser, () => new RoleRelations().RoleUserEntityUsingRoleID, typeof(RoleUserEntity), (int)SD.HnD.DALAdapter.EntityType.RoleUserEntity);
				AddNavigatorMetaData<RoleEntity, EntityCollection<SystemDataEntity>>("SystemDataAnonymousRole", a => a._systemDataAnonymousRole, (a, b) => a._systemDataAnonymousRole = b, a => a.SystemDataAnonymousRole, () => new RoleRelations().SystemDataEntityUsingAnonymousRole, typeof(SystemDataEntity), (int)SD.HnD.DALAdapter.EntityType.SystemDataEntity);
				AddNavigatorMetaData<RoleEntity, EntityCollection<SystemDataEntity>>("SystemDataDefaultRoleNewUser", a => a._systemDataDefaultRoleNewUser, (a, b) => a._systemDataDefaultRoleNewUser = b, a => a.SystemDataDefaultRoleNewUser, () => new RoleRelations().SystemDataEntityUsingDefaultRoleNewUser, typeof(SystemDataEntity), (int)SD.HnD.DALAdapter.EntityType.SystemDataEntity);
				AddNavigatorMetaData<RoleEntity, EntityCollection<ActionRightEntity>>("AssignedSystemActionRights", a => a._assignedSystemActionRights, (a, b) => a._assignedSystemActionRights = b, a => a.AssignedSystemActionRights, () => new RoleRelations().RoleSystemActionRightEntityUsingRoleID, () => new RoleSystemActionRightRelations().ActionRightEntityUsingActionRightID, "RoleEntity__", "RoleSystemActionRight_", typeof(ActionRightEntity), (int)SD.HnD.DALAdapter.EntityType.ActionRightEntity);
				AddNavigatorMetaData<RoleEntity, EntityCollection<AuditActionEntity>>("AssignedAuditActions", a => a._assignedAuditActions, (a, b) => a._assignedAuditActions = b, a => a.AssignedAuditActions, () => new RoleRelations().RoleAuditActionEntityUsingRoleID, () => new RoleAuditActionRelations().AuditActionEntityUsingAuditActionID, "RoleEntity__", "RoleAuditAction_", typeof(AuditActionEntity), (int)SD.HnD.DALAdapter.EntityType.AuditActionEntity);
				AddNavigatorMetaData<RoleEntity, EntityCollection<UserEntity>>("Users", a => a._users, (a, b) => a._users = b, a => a.Users, () => new RoleRelations().RoleUserEntityUsingRoleID, () => new RoleUserRelations().UserEntityUsingUserID, "RoleEntity__", "RoleUser_", typeof(UserEntity), (int)SD.HnD.DALAdapter.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static RoleEntity()
		{
		}

		/// <summary> CTor</summary>
		public RoleEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public RoleEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this RoleEntity</param>
		public RoleEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="roleID">PK value for Role which data should be fetched into this Role object</param>
		public RoleEntity(System.Int32 roleID) : this(roleID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="roleID">PK value for Role which data should be fetched into this Role object</param>
		/// <param name="validator">The custom validator object for this RoleEntity</param>
		public RoleEntity(System.Int32 roleID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.RoleID = roleID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected RoleEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ForumRoleForumActionRight' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoForumRoleForumActionRights() { return CreateRelationInfoForNavigator("ForumRoleForumActionRights"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RoleAuditAction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRoleAuditAction() { return CreateRelationInfoForNavigator("RoleAuditAction"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RoleSystemActionRight' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRoleSystemActionRights() { return CreateRelationInfoForNavigator("RoleSystemActionRights"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RoleUser' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRoleUser() { return CreateRelationInfoForNavigator("RoleUser"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SystemData' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSystemDataAnonymousRole() { return CreateRelationInfoForNavigator("SystemDataAnonymousRole"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SystemData' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSystemDataDefaultRoleNewUser() { return CreateRelationInfoForNavigator("SystemDataDefaultRoleNewUser"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ActionRight' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAssignedSystemActionRights() { return CreateRelationInfoForNavigator("AssignedSystemActionRights"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AuditAction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAssignedAuditActions() { return CreateRelationInfoForNavigator("AssignedAuditActions"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUsers() { return CreateRelationInfoForNavigator("Users"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this RoleEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static RoleRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ForumRoleForumActionRight' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathForumRoleForumActionRights { get { return _staticMetaData.GetPrefetchPathElement("ForumRoleForumActionRights", CommonEntityBase.CreateEntityCollection<ForumRoleForumActionRightEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RoleAuditAction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRoleAuditAction { get { return _staticMetaData.GetPrefetchPathElement("RoleAuditAction", CommonEntityBase.CreateEntityCollection<RoleAuditActionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RoleSystemActionRight' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRoleSystemActionRights { get { return _staticMetaData.GetPrefetchPathElement("RoleSystemActionRights", CommonEntityBase.CreateEntityCollection<RoleSystemActionRightEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RoleUser' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRoleUser { get { return _staticMetaData.GetPrefetchPathElement("RoleUser", CommonEntityBase.CreateEntityCollection<RoleUserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SystemData' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSystemDataAnonymousRole { get { return _staticMetaData.GetPrefetchPathElement("SystemDataAnonymousRole", CommonEntityBase.CreateEntityCollection<SystemDataEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SystemData' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSystemDataDefaultRoleNewUser { get { return _staticMetaData.GetPrefetchPathElement("SystemDataDefaultRoleNewUser", CommonEntityBase.CreateEntityCollection<SystemDataEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ActionRight' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAssignedSystemActionRights { get { return _staticMetaData.GetPrefetchPathElement("AssignedSystemActionRights", CommonEntityBase.CreateEntityCollection<ActionRightEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AuditAction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAssignedAuditActions { get { return _staticMetaData.GetPrefetchPathElement("AssignedAuditActions", CommonEntityBase.CreateEntityCollection<AuditActionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUsers { get { return _staticMetaData.GetPrefetchPathElement("Users", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The RoleID property of the Entity Role<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Role"."RoleID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		[Required]
		public virtual System.Int32 RoleID
		{
			get { return (System.Int32)GetValue((int)RoleFieldIndex.RoleID, true); }
			set { SetValue((int)RoleFieldIndex.RoleID, value); }
		}

		/// <summary>The RoleDescription property of the Entity Role<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Role"."RoleDescription".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		[StringLength(50)]
		[MinLength(2)]
		public virtual System.String RoleDescription
		{
			get { return (System.String)GetValue((int)RoleFieldIndex.RoleDescription, true); }
			set { SetValue((int)RoleFieldIndex.RoleDescription, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ForumRoleForumActionRightEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ForumRoleForumActionRightEntity))]
		public virtual EntityCollection<ForumRoleForumActionRightEntity> ForumRoleForumActionRights { get { return GetOrCreateEntityCollection<ForumRoleForumActionRightEntity, ForumRoleForumActionRightEntityFactory>("Role", true, false, ref _forumRoleForumActionRights); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RoleAuditActionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RoleAuditActionEntity))]
		public virtual EntityCollection<RoleAuditActionEntity> RoleAuditAction { get { return GetOrCreateEntityCollection<RoleAuditActionEntity, RoleAuditActionEntityFactory>("Role", true, false, ref _roleAuditAction); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RoleSystemActionRightEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RoleSystemActionRightEntity))]
		public virtual EntityCollection<RoleSystemActionRightEntity> RoleSystemActionRights { get { return GetOrCreateEntityCollection<RoleSystemActionRightEntity, RoleSystemActionRightEntityFactory>("Role", true, false, ref _roleSystemActionRights); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RoleUserEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RoleUserEntity))]
		public virtual EntityCollection<RoleUserEntity> RoleUser { get { return GetOrCreateEntityCollection<RoleUserEntity, RoleUserEntityFactory>("Role", true, false, ref _roleUser); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SystemDataEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SystemDataEntity))]
		public virtual EntityCollection<SystemDataEntity> SystemDataAnonymousRole { get { return GetOrCreateEntityCollection<SystemDataEntity, SystemDataEntityFactory>("RoleForAnonymous", true, false, ref _systemDataAnonymousRole); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SystemDataEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SystemDataEntity))]
		public virtual EntityCollection<SystemDataEntity> SystemDataDefaultRoleNewUser { get { return GetOrCreateEntityCollection<SystemDataEntity, SystemDataEntityFactory>("RoleForNewUser", true, false, ref _systemDataDefaultRoleNewUser); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ActionRightEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ActionRightEntity))]
		public virtual EntityCollection<ActionRightEntity> AssignedSystemActionRights { get { return GetOrCreateEntityCollection<ActionRightEntity, ActionRightEntityFactory>("SystemRightAssignedToRoles", false, true, ref _assignedSystemActionRights); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'AuditActionEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AuditActionEntity))]
		public virtual EntityCollection<AuditActionEntity> AssignedAuditActions { get { return GetOrCreateEntityCollection<AuditActionEntity, AuditActionEntityFactory>("RolesWithAuditAction", false, true, ref _assignedAuditActions); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'UserEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserEntity))]
		public virtual EntityCollection<UserEntity> Users { get { return GetOrCreateEntityCollection<UserEntity, UserEntityFactory>("Roles", false, true, ref _users); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.HnD.DALAdapter
{
	public enum RoleFieldIndex
	{
		///<summary>RoleID. </summary>
		RoleID,
		///<summary>RoleDescription. </summary>
		RoleDescription,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.HnD.DALAdapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Role. </summary>
	public partial class RoleRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between RoleEntity and ForumRoleForumActionRightEntity over the 1:n relation they have, using the relation between the fields: Role.RoleID - ForumRoleForumActionRight.RoleID</summary>
		public virtual IEntityRelation ForumRoleForumActionRightEntityUsingRoleID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ForumRoleForumActionRights", true, new[] { RoleFields.RoleID, ForumRoleForumActionRightFields.RoleID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoleEntity and RoleAuditActionEntity over the 1:n relation they have, using the relation between the fields: Role.RoleID - RoleAuditAction.RoleID</summary>
		public virtual IEntityRelation RoleAuditActionEntityUsingRoleID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RoleAuditAction", true, new[] { RoleFields.RoleID, RoleAuditActionFields.RoleID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoleEntity and RoleSystemActionRightEntity over the 1:n relation they have, using the relation between the fields: Role.RoleID - RoleSystemActionRight.RoleID</summary>
		public virtual IEntityRelation RoleSystemActionRightEntityUsingRoleID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RoleSystemActionRights", true, new[] { RoleFields.RoleID, RoleSystemActionRightFields.RoleID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoleEntity and RoleUserEntity over the 1:n relation they have, using the relation between the fields: Role.RoleID - RoleUser.RoleID</summary>
		public virtual IEntityRelation RoleUserEntityUsingRoleID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RoleUser", true, new[] { RoleFields.RoleID, RoleUserFields.RoleID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoleEntity and SystemDataEntity over the 1:n relation they have, using the relation between the fields: Role.RoleID - SystemData.AnonymousRole</summary>
		public virtual IEntityRelation SystemDataEntityUsingAnonymousRole
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SystemDataAnonymousRole", true, new[] { RoleFields.RoleID, SystemDataFields.AnonymousRole }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoleEntity and SystemDataEntity over the 1:n relation they have, using the relation between the fields: Role.RoleID - SystemData.DefaultRoleNewUser</summary>
		public virtual IEntityRelation SystemDataEntityUsingDefaultRoleNewUser
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SystemDataDefaultRoleNewUser", true, new[] { RoleFields.RoleID, SystemDataFields.DefaultRoleNewUser }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticRoleRelations
	{
		internal static readonly IEntityRelation ForumRoleForumActionRightEntityUsingRoleIDStatic = new RoleRelations().ForumRoleForumActionRightEntityUsingRoleID;
		internal static readonly IEntityRelation RoleAuditActionEntityUsingRoleIDStatic = new RoleRelations().RoleAuditActionEntityUsingRoleID;
		internal static readonly IEntityRelation RoleSystemActionRightEntityUsingRoleIDStatic = new RoleRelations().RoleSystemActionRightEntityUsingRoleID;
		internal static readonly IEntityRelation RoleUserEntityUsingRoleIDStatic = new RoleRelations().RoleUserEntityUsingRoleID;
		internal static readonly IEntityRelation SystemDataEntityUsingAnonymousRoleStatic = new RoleRelations().SystemDataEntityUsingAnonymousRole;
		internal static readonly IEntityRelation SystemDataEntityUsingDefaultRoleNewUserStatic = new RoleRelations().SystemDataEntityUsingDefaultRoleNewUser;

		/// <summary>CTor</summary>
		static StaticRoleRelations() { }
	}
}
