//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.HnD.DALAdapter.HelperClasses;
using SD.HnD.DALAdapter.FactoryClasses;
using SD.HnD.DALAdapter.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'RoleAuditAction'.<br/><br/></summary>
	[Serializable]
	public partial class RoleAuditActionEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private AuditActionEntity _auditAction;
		private RoleEntity _role;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static RoleAuditActionEntityStaticMetaData _staticMetaData = new RoleAuditActionEntityStaticMetaData();
		private static RoleAuditActionRelations _relationsFactory = new RoleAuditActionRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name AuditAction</summary>
			public static readonly string AuditAction = "AuditAction";
			/// <summary>Member name Role</summary>
			public static readonly string Role = "Role";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class RoleAuditActionEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public RoleAuditActionEntityStaticMetaData()
			{
				SetEntityCoreInfo("RoleAuditActionEntity", InheritanceHierarchyType.None, false, (int)SD.HnD.DALAdapter.EntityType.RoleAuditActionEntity, typeof(RoleAuditActionEntity), typeof(RoleAuditActionEntityFactory), false);
				AddNavigatorMetaData<RoleAuditActionEntity, AuditActionEntity>("AuditAction", "RoleAuditActions", (a, b) => a._auditAction = b, a => a._auditAction, (a, b) => a.AuditAction = b, SD.HnD.DALAdapter.RelationClasses.StaticRoleAuditActionRelations.AuditActionEntityUsingAuditActionIDStatic, ()=>new RoleAuditActionRelations().AuditActionEntityUsingAuditActionID, null, new int[] { (int)RoleAuditActionFieldIndex.AuditActionID }, null, true, (int)SD.HnD.DALAdapter.EntityType.AuditActionEntity);
				AddNavigatorMetaData<RoleAuditActionEntity, RoleEntity>("Role", "RoleAuditAction", (a, b) => a._role = b, a => a._role, (a, b) => a.Role = b, SD.HnD.DALAdapter.RelationClasses.StaticRoleAuditActionRelations.RoleEntityUsingRoleIDStatic, ()=>new RoleAuditActionRelations().RoleEntityUsingRoleID, null, new int[] { (int)RoleAuditActionFieldIndex.RoleID }, null, true, (int)SD.HnD.DALAdapter.EntityType.RoleEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static RoleAuditActionEntity()
		{
		}

		/// <summary> CTor</summary>
		public RoleAuditActionEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public RoleAuditActionEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this RoleAuditActionEntity</param>
		public RoleAuditActionEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="auditActionID">PK value for RoleAuditAction which data should be fetched into this RoleAuditAction object</param>
		/// <param name="roleID">PK value for RoleAuditAction which data should be fetched into this RoleAuditAction object</param>
		public RoleAuditActionEntity(System.Int32 auditActionID, System.Int32 roleID) : this(auditActionID, roleID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="auditActionID">PK value for RoleAuditAction which data should be fetched into this RoleAuditAction object</param>
		/// <param name="roleID">PK value for RoleAuditAction which data should be fetched into this RoleAuditAction object</param>
		/// <param name="validator">The custom validator object for this RoleAuditActionEntity</param>
		public RoleAuditActionEntity(System.Int32 auditActionID, System.Int32 roleID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.AuditActionID = auditActionID;
			this.RoleID = roleID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected RoleAuditActionEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AuditAction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAuditAction() { return CreateRelationInfoForNavigator("AuditAction"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Role' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRole() { return CreateRelationInfoForNavigator("Role"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this RoleAuditActionEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static RoleAuditActionRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AuditAction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAuditAction { get { return _staticMetaData.GetPrefetchPathElement("AuditAction", CommonEntityBase.CreateEntityCollection<AuditActionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Role' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRole { get { return _staticMetaData.GetPrefetchPathElement("Role", CommonEntityBase.CreateEntityCollection<RoleEntity>()); } }

		/// <summary>The AuditActionID property of the Entity RoleAuditAction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoleAuditAction"."AuditActionID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		[Required]
		public virtual System.Int32 AuditActionID
		{
			get { return (System.Int32)GetValue((int)RoleAuditActionFieldIndex.AuditActionID, true); }
			set	{ SetValue((int)RoleAuditActionFieldIndex.AuditActionID, value); }
		}

		/// <summary>The RoleID property of the Entity RoleAuditAction<br/><br/></summary>
		/// <remarks>Mapped on  table field: "RoleAuditAction"."RoleID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		[Required]
		public virtual System.Int32 RoleID
		{
			get { return (System.Int32)GetValue((int)RoleAuditActionFieldIndex.RoleID, true); }
			set	{ SetValue((int)RoleAuditActionFieldIndex.RoleID, value); }
		}

		/// <summary>Gets / sets related entity of type 'AuditActionEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AuditActionEntity AuditAction
		{
			get { return _auditAction; }
			set { SetSingleRelatedEntityNavigator(value, "AuditAction"); }
		}

		/// <summary>Gets / sets related entity of type 'RoleEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual RoleEntity Role
		{
			get { return _role; }
			set { SetSingleRelatedEntityNavigator(value, "Role"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.HnD.DALAdapter
{
	public enum RoleAuditActionFieldIndex
	{
		///<summary>AuditActionID. </summary>
		AuditActionID,
		///<summary>RoleID. </summary>
		RoleID,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.HnD.DALAdapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: RoleAuditAction. </summary>
	public partial class RoleAuditActionRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between RoleAuditActionEntity and AuditActionEntity over the m:1 relation they have, using the relation between the fields: RoleAuditAction.AuditActionID - AuditAction.AuditActionID</summary>
		public virtual IEntityRelation AuditActionEntityUsingAuditActionID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "AuditAction", false, new[] { AuditActionFields.AuditActionID, RoleAuditActionFields.AuditActionID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RoleAuditActionEntity and RoleEntity over the m:1 relation they have, using the relation between the fields: RoleAuditAction.RoleID - Role.RoleID</summary>
		public virtual IEntityRelation RoleEntityUsingRoleID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Role", false, new[] { RoleFields.RoleID, RoleAuditActionFields.RoleID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticRoleAuditActionRelations
	{
		internal static readonly IEntityRelation AuditActionEntityUsingAuditActionIDStatic = new RoleAuditActionRelations().AuditActionEntityUsingAuditActionID;
		internal static readonly IEntityRelation RoleEntityUsingRoleIDStatic = new RoleAuditActionRelations().RoleEntityUsingRoleID;

		/// <summary>CTor</summary>
		static StaticRoleAuditActionRelations() { }
	}
}
