//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.HnD.DALAdapter.HelperClasses;
using SD.HnD.DALAdapter.FactoryClasses;
using SD.HnD.DALAdapter.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'User'.<br/><br/></summary>
	[Serializable]
	public partial class UserEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<AuditDataCoreEntity> _loggedAudits;
		private EntityCollection<BookmarkEntity> _bookmarks;
		private EntityCollection<IPBanEntity> _iPBansSet;
		private EntityCollection<MessageEntity> _postedMessages;
		private EntityCollection<RoleUserEntity> _roleUser;
		private EntityCollection<SupportQueueThreadEntity> _supportQueueThreadsClaimed;
		private EntityCollection<SupportQueueThreadEntity> _supportQueueThreadsPlaced;
		private EntityCollection<ThreadEntity> _startedThreads;
		private EntityCollection<ThreadSubscriptionEntity> _threadSubscription;
		private EntityCollection<ForumEntity> _startedThreadsInForums;
		private EntityCollection<RoleEntity> _roles;
		private EntityCollection<ThreadEntity> _threadsInBookmarks;
		private EntityCollection<ThreadEntity> _postedMessagesInThreads;
		private EntityCollection<ThreadEntity> _threadCollectionViaThreadSubscription;
		private UserTitleEntity _userTitle;
		private PasswordResetTokenEntity _passwordResetToken;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static UserEntityStaticMetaData _staticMetaData = new UserEntityStaticMetaData();
		private static UserRelations _relationsFactory = new UserRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name UserTitle</summary>
			public static readonly string UserTitle = "UserTitle";
			/// <summary>Member name LoggedAudits</summary>
			public static readonly string LoggedAudits = "LoggedAudits";
			/// <summary>Member name Bookmarks</summary>
			public static readonly string Bookmarks = "Bookmarks";
			/// <summary>Member name IPBansSet</summary>
			public static readonly string IPBansSet = "IPBansSet";
			/// <summary>Member name PostedMessages</summary>
			public static readonly string PostedMessages = "PostedMessages";
			/// <summary>Member name RoleUser</summary>
			public static readonly string RoleUser = "RoleUser";
			/// <summary>Member name SupportQueueThreadsClaimed</summary>
			public static readonly string SupportQueueThreadsClaimed = "SupportQueueThreadsClaimed";
			/// <summary>Member name SupportQueueThreadsPlaced</summary>
			public static readonly string SupportQueueThreadsPlaced = "SupportQueueThreadsPlaced";
			/// <summary>Member name StartedThreads</summary>
			public static readonly string StartedThreads = "StartedThreads";
			/// <summary>Member name ThreadSubscription</summary>
			public static readonly string ThreadSubscription = "ThreadSubscription";
			/// <summary>Member name StartedThreadsInForums</summary>
			public static readonly string StartedThreadsInForums = "StartedThreadsInForums";
			/// <summary>Member name Roles</summary>
			public static readonly string Roles = "Roles";
			/// <summary>Member name ThreadsInBookmarks</summary>
			public static readonly string ThreadsInBookmarks = "ThreadsInBookmarks";
			/// <summary>Member name PostedMessagesInThreads</summary>
			public static readonly string PostedMessagesInThreads = "PostedMessagesInThreads";
			/// <summary>Member name ThreadCollectionViaThreadSubscription</summary>
			public static readonly string ThreadCollectionViaThreadSubscription = "ThreadCollectionViaThreadSubscription";
			/// <summary>Member name PasswordResetToken</summary>
			public static readonly string PasswordResetToken = "PasswordResetToken";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UserEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UserEntityStaticMetaData()
			{
				SetEntityCoreInfo("UserEntity", InheritanceHierarchyType.None, false, (int)SD.HnD.DALAdapter.EntityType.UserEntity, typeof(UserEntity), typeof(UserEntityFactory), false);
				AddNavigatorMetaData<UserEntity, EntityCollection<AuditDataCoreEntity>>("LoggedAudits", a => a._loggedAudits, (a, b) => a._loggedAudits = b, a => a.LoggedAudits, () => new UserRelations().AuditDataCoreEntityUsingUserID, typeof(AuditDataCoreEntity), (int)SD.HnD.DALAdapter.EntityType.AuditDataCoreEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<BookmarkEntity>>("Bookmarks", a => a._bookmarks, (a, b) => a._bookmarks = b, a => a.Bookmarks, () => new UserRelations().BookmarkEntityUsingUserID, typeof(BookmarkEntity), (int)SD.HnD.DALAdapter.EntityType.BookmarkEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<IPBanEntity>>("IPBansSet", a => a._iPBansSet, (a, b) => a._iPBansSet = b, a => a.IPBansSet, () => new UserRelations().IPBanEntityUsingIPBanSetByUserID, typeof(IPBanEntity), (int)SD.HnD.DALAdapter.EntityType.IPBanEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<MessageEntity>>("PostedMessages", a => a._postedMessages, (a, b) => a._postedMessages = b, a => a.PostedMessages, () => new UserRelations().MessageEntityUsingPostedByUserID, typeof(MessageEntity), (int)SD.HnD.DALAdapter.EntityType.MessageEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<RoleUserEntity>>("RoleUser", a => a._roleUser, (a, b) => a._roleUser = b, a => a.RoleUser, () => new UserRelations().RoleUserEntityUsingUserID, typeof(RoleUserEntity), (int)SD.HnD.DALAdapter.EntityType.RoleUserEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<SupportQueueThreadEntity>>("SupportQueueThreadsClaimed", a => a._supportQueueThreadsClaimed, (a, b) => a._supportQueueThreadsClaimed = b, a => a.SupportQueueThreadsClaimed, () => new UserRelations().SupportQueueThreadEntityUsingClaimedByUserID, typeof(SupportQueueThreadEntity), (int)SD.HnD.DALAdapter.EntityType.SupportQueueThreadEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<SupportQueueThreadEntity>>("SupportQueueThreadsPlaced", a => a._supportQueueThreadsPlaced, (a, b) => a._supportQueueThreadsPlaced = b, a => a.SupportQueueThreadsPlaced, () => new UserRelations().SupportQueueThreadEntityUsingPlacedInQueueByUserID, typeof(SupportQueueThreadEntity), (int)SD.HnD.DALAdapter.EntityType.SupportQueueThreadEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ThreadEntity>>("StartedThreads", a => a._startedThreads, (a, b) => a._startedThreads = b, a => a.StartedThreads, () => new UserRelations().ThreadEntityUsingStartedByUserID, typeof(ThreadEntity), (int)SD.HnD.DALAdapter.EntityType.ThreadEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ThreadSubscriptionEntity>>("ThreadSubscription", a => a._threadSubscription, (a, b) => a._threadSubscription = b, a => a.ThreadSubscription, () => new UserRelations().ThreadSubscriptionEntityUsingUserID, typeof(ThreadSubscriptionEntity), (int)SD.HnD.DALAdapter.EntityType.ThreadSubscriptionEntity);
				AddNavigatorMetaData<UserEntity, UserTitleEntity>("UserTitle", "Users", (a, b) => a._userTitle = b, a => a._userTitle, (a, b) => a.UserTitle = b, SD.HnD.DALAdapter.RelationClasses.StaticUserRelations.UserTitleEntityUsingUserTitleIDStatic, ()=>new UserRelations().UserTitleEntityUsingUserTitleID, null, new int[] { (int)UserFieldIndex.UserTitleID }, null, true, (int)SD.HnD.DALAdapter.EntityType.UserTitleEntity);
				AddNavigatorMetaData<UserEntity, PasswordResetTokenEntity>("PasswordResetToken", "User", (a, b) => a._passwordResetToken = b, a => a._passwordResetToken, (a, b) => a.PasswordResetToken = b, SD.HnD.DALAdapter.RelationClasses.StaticUserRelations.PasswordResetTokenEntityUsingUserIDStatic, ()=>new UserRelations().PasswordResetTokenEntityUsingUserID, null, null, null, true, (int)SD.HnD.DALAdapter.EntityType.PasswordResetTokenEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ForumEntity>>("StartedThreadsInForums", a => a._startedThreadsInForums, (a, b) => a._startedThreadsInForums = b, a => a.StartedThreadsInForums, () => new UserRelations().ThreadEntityUsingStartedByUserID, () => new ThreadRelations().ForumEntityUsingForumID, "UserEntity__", "Thread_", typeof(ForumEntity), (int)SD.HnD.DALAdapter.EntityType.ForumEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<RoleEntity>>("Roles", a => a._roles, (a, b) => a._roles = b, a => a.Roles, () => new UserRelations().RoleUserEntityUsingUserID, () => new RoleUserRelations().RoleEntityUsingRoleID, "UserEntity__", "RoleUser_", typeof(RoleEntity), (int)SD.HnD.DALAdapter.EntityType.RoleEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ThreadEntity>>("ThreadsInBookmarks", a => a._threadsInBookmarks, (a, b) => a._threadsInBookmarks = b, a => a.ThreadsInBookmarks, () => new UserRelations().BookmarkEntityUsingUserID, () => new BookmarkRelations().ThreadEntityUsingThreadID, "UserEntity__", "Bookmark_", typeof(ThreadEntity), (int)SD.HnD.DALAdapter.EntityType.ThreadEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ThreadEntity>>("PostedMessagesInThreads", a => a._postedMessagesInThreads, (a, b) => a._postedMessagesInThreads = b, a => a.PostedMessagesInThreads, () => new UserRelations().MessageEntityUsingPostedByUserID, () => new MessageRelations().ThreadEntityUsingThreadID, "UserEntity__", "Message_", typeof(ThreadEntity), (int)SD.HnD.DALAdapter.EntityType.ThreadEntity);
				AddNavigatorMetaData<UserEntity, EntityCollection<ThreadEntity>>("ThreadCollectionViaThreadSubscription", a => a._threadCollectionViaThreadSubscription, (a, b) => a._threadCollectionViaThreadSubscription = b, a => a.ThreadCollectionViaThreadSubscription, () => new UserRelations().ThreadSubscriptionEntityUsingUserID, () => new ThreadSubscriptionRelations().ThreadEntityUsingThreadID, "UserEntity__", "ThreadSubscription_", typeof(ThreadEntity), (int)SD.HnD.DALAdapter.EntityType.ThreadEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static UserEntity()
		{
		}

		/// <summary> CTor</summary>
		public UserEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public UserEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="userID">PK value for User which data should be fetched into this User object</param>
		public UserEntity(System.Int32 userID) : this(userID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="userID">PK value for User which data should be fetched into this User object</param>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(System.Int32 userID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.UserID = userID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UserEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Method which will construct a filter (predicate expression) for the unique constraint defined on the fields: NickName .</summary>
		/// <returns>true if succeeded and the contents is read, false otherwise</returns>
		public IPredicateExpression ConstructFilterForUCNickName()
		{
			var filter = new PredicateExpression();
			filter.Add(SD.HnD.DALAdapter.HelperClasses.UserFields.NickName == this.Fields.GetCurrentValue((int)UserFieldIndex.NickName));
 			return filter;
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AuditDataCore' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoLoggedAudits() { return CreateRelationInfoForNavigator("LoggedAudits"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Bookmark' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoBookmarks() { return CreateRelationInfoForNavigator("Bookmarks"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'IPBan' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIPBansSet() { return CreateRelationInfoForNavigator("IPBansSet"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Message' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPostedMessages() { return CreateRelationInfoForNavigator("PostedMessages"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RoleUser' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRoleUser() { return CreateRelationInfoForNavigator("RoleUser"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SupportQueueThread' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSupportQueueThreadsClaimed() { return CreateRelationInfoForNavigator("SupportQueueThreadsClaimed"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'SupportQueueThread' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSupportQueueThreadsPlaced() { return CreateRelationInfoForNavigator("SupportQueueThreadsPlaced"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Thread' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStartedThreads() { return CreateRelationInfoForNavigator("StartedThreads"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ThreadSubscription' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoThreadSubscription() { return CreateRelationInfoForNavigator("ThreadSubscription"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Forum' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoStartedThreadsInForums() { return CreateRelationInfoForNavigator("StartedThreadsInForums"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Role' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRoles() { return CreateRelationInfoForNavigator("Roles"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Thread' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoThreadsInBookmarks() { return CreateRelationInfoForNavigator("ThreadsInBookmarks"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Thread' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPostedMessagesInThreads() { return CreateRelationInfoForNavigator("PostedMessagesInThreads"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Thread' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoThreadCollectionViaThreadSubscription() { return CreateRelationInfoForNavigator("ThreadCollectionViaThreadSubscription"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'UserTitle' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUserTitle() { return CreateRelationInfoForNavigator("UserTitle"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'PasswordResetToken' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPasswordResetToken() { return CreateRelationInfoForNavigator("PasswordResetToken"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this UserEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UserRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AuditDataCore' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathLoggedAudits { get { return _staticMetaData.GetPrefetchPathElement("LoggedAudits", CommonEntityBase.CreateEntityCollection<AuditDataCoreEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Bookmark' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathBookmarks { get { return _staticMetaData.GetPrefetchPathElement("Bookmarks", CommonEntityBase.CreateEntityCollection<BookmarkEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'IPBan' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIPBansSet { get { return _staticMetaData.GetPrefetchPathElement("IPBansSet", CommonEntityBase.CreateEntityCollection<IPBanEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Message' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPostedMessages { get { return _staticMetaData.GetPrefetchPathElement("PostedMessages", CommonEntityBase.CreateEntityCollection<MessageEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RoleUser' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRoleUser { get { return _staticMetaData.GetPrefetchPathElement("RoleUser", CommonEntityBase.CreateEntityCollection<RoleUserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SupportQueueThread' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSupportQueueThreadsClaimed { get { return _staticMetaData.GetPrefetchPathElement("SupportQueueThreadsClaimed", CommonEntityBase.CreateEntityCollection<SupportQueueThreadEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SupportQueueThread' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSupportQueueThreadsPlaced { get { return _staticMetaData.GetPrefetchPathElement("SupportQueueThreadsPlaced", CommonEntityBase.CreateEntityCollection<SupportQueueThreadEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Thread' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStartedThreads { get { return _staticMetaData.GetPrefetchPathElement("StartedThreads", CommonEntityBase.CreateEntityCollection<ThreadEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ThreadSubscription' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathThreadSubscription { get { return _staticMetaData.GetPrefetchPathElement("ThreadSubscription", CommonEntityBase.CreateEntityCollection<ThreadSubscriptionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Forum' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathStartedThreadsInForums { get { return _staticMetaData.GetPrefetchPathElement("StartedThreadsInForums", CommonEntityBase.CreateEntityCollection<ForumEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Role' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRoles { get { return _staticMetaData.GetPrefetchPathElement("Roles", CommonEntityBase.CreateEntityCollection<RoleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Thread' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathThreadsInBookmarks { get { return _staticMetaData.GetPrefetchPathElement("ThreadsInBookmarks", CommonEntityBase.CreateEntityCollection<ThreadEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Thread' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPostedMessagesInThreads { get { return _staticMetaData.GetPrefetchPathElement("PostedMessagesInThreads", CommonEntityBase.CreateEntityCollection<ThreadEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Thread' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathThreadCollectionViaThreadSubscription { get { return _staticMetaData.GetPrefetchPathElement("ThreadCollectionViaThreadSubscription", CommonEntityBase.CreateEntityCollection<ThreadEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'UserTitle' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUserTitle { get { return _staticMetaData.GetPrefetchPathElement("UserTitle", CommonEntityBase.CreateEntityCollection<UserTitleEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PasswordResetToken' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPasswordResetToken { get { return _staticMetaData.GetPrefetchPathElement("PasswordResetToken", CommonEntityBase.CreateEntityCollection<PasswordResetTokenEntity>()); } }

		/// <summary>The UserID property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."UserID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		[Required]
		public virtual System.Int32 UserID
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.UserID, true); }
			set { SetValue((int)UserFieldIndex.UserID, value); }
		}

		/// <summary>The NickName property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."NickName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 20.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		[StringLength(20)]
		[MinLength(2)]
		public virtual System.String NickName
		{
			get { return (System.String)GetValue((int)UserFieldIndex.NickName, true); }
			set { SetValue((int)UserFieldIndex.NickName, value); }
		}

		/// <summary>The Password property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Password".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 128.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		[StringLength(128)]
		[MinLength(2)]
		public virtual System.String Password
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Password, true); }
			set { SetValue((int)UserFieldIndex.Password, value); }
		}

		/// <summary>The IsBanned property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."IsBanned".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.Boolean IsBanned
		{
			get { return (System.Boolean)GetValue((int)UserFieldIndex.IsBanned, true); }
			set { SetValue((int)UserFieldIndex.IsBanned, value); }
		}

		/// <summary>The IPNumber property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."IPNumber".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 25.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		[StringLength(25)]
		[MinLength(2)]
		public virtual System.String IPNumber
		{
			get { return (System.String)GetValue((int)UserFieldIndex.IPNumber, true); }
			set { SetValue((int)UserFieldIndex.IPNumber, value); }
		}

		/// <summary>The Signature property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Signature".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 250.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		[StringLength(250)]
		public virtual System.String Signature
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Signature, true); }
			set { SetValue((int)UserFieldIndex.Signature, value); }
		}

		/// <summary>The IconURL property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."IconURL".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 250.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		[StringLength(250)]
		public virtual System.String IconURL
		{
			get { return (System.String)GetValue((int)UserFieldIndex.IconURL, true); }
			set { SetValue((int)UserFieldIndex.IconURL, value); }
		}

		/// <summary>The EmailAddress property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."EmailAddress".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		[StringLength(200)]
		public virtual System.String EmailAddress
		{
			get { return (System.String)GetValue((int)UserFieldIndex.EmailAddress, true); }
			set { SetValue((int)UserFieldIndex.EmailAddress, value); }
		}

		/// <summary>The UserTitleID property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."UserTitleID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.Int32 UserTitleID
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.UserTitleID, true); }
			set { SetValue((int)UserFieldIndex.UserTitleID, value); }
		}

		/// <summary>The DateOfBirth property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."DateOfBirth".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> DateOfBirth
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.DateOfBirth, false); }
			set { SetValue((int)UserFieldIndex.DateOfBirth, value); }
		}

		/// <summary>The Occupation property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Occupation".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		[StringLength(100)]
		public virtual System.String Occupation
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Occupation, true); }
			set { SetValue((int)UserFieldIndex.Occupation, value); }
		}

		/// <summary>The Location property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Location".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		[StringLength(100)]
		public virtual System.String Location
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Location, true); }
			set { SetValue((int)UserFieldIndex.Location, value); }
		}

		/// <summary>The Website property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."Website".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 200.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		[StringLength(200)]
		public virtual System.String Website
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Website, true); }
			set { SetValue((int)UserFieldIndex.Website, value); }
		}

		/// <summary>The JoinDate property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."JoinDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> JoinDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.JoinDate, false); }
			set { SetValue((int)UserFieldIndex.JoinDate, value); }
		}

		/// <summary>The AmountOfPostings property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."AmountOfPostings".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> AmountOfPostings
		{
			get { return (Nullable<System.Int32>)GetValue((int)UserFieldIndex.AmountOfPostings, false); }
			set { SetValue((int)UserFieldIndex.AmountOfPostings, value); }
		}

		/// <summary>The EmailAddressIsPublic property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."EmailAddressIsPublic".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Boolean> EmailAddressIsPublic
		{
			get { return (Nullable<System.Boolean>)GetValue((int)UserFieldIndex.EmailAddressIsPublic, false); }
			set { SetValue((int)UserFieldIndex.EmailAddressIsPublic, value); }
		}

		/// <summary>The LastVisitedDate property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."LastVisitedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> LastVisitedDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.LastVisitedDate, false); }
			set { SetValue((int)UserFieldIndex.LastVisitedDate, value); }
		}

		/// <summary>The AutoSubscribeToThread property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."AutoSubscribeToThread".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.Boolean AutoSubscribeToThread
		{
			get { return (System.Boolean)GetValue((int)UserFieldIndex.AutoSubscribeToThread, true); }
			set { SetValue((int)UserFieldIndex.AutoSubscribeToThread, value); }
		}

		/// <summary>The DefaultNumberOfMessagesPerPage property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."DefaultNumberOfMessagesPerPage".<br/>Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.Int16 DefaultNumberOfMessagesPerPage
		{
			get { return (System.Int16)GetValue((int)UserFieldIndex.DefaultNumberOfMessagesPerPage, true); }
			set { SetValue((int)UserFieldIndex.DefaultNumberOfMessagesPerPage, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'AuditDataCoreEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AuditDataCoreEntity))]
		public virtual EntityCollection<AuditDataCoreEntity> LoggedAudits { get { return GetOrCreateEntityCollection<AuditDataCoreEntity, AuditDataCoreEntityFactory>("UserAudited", true, false, ref _loggedAudits); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'BookmarkEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(BookmarkEntity))]
		public virtual EntityCollection<BookmarkEntity> Bookmarks { get { return GetOrCreateEntityCollection<BookmarkEntity, BookmarkEntityFactory>("User", true, false, ref _bookmarks); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'IPBanEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(IPBanEntity))]
		public virtual EntityCollection<IPBanEntity> IPBansSet { get { return GetOrCreateEntityCollection<IPBanEntity, IPBanEntityFactory>("SetByUser", true, false, ref _iPBansSet); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'MessageEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(MessageEntity))]
		public virtual EntityCollection<MessageEntity> PostedMessages { get { return GetOrCreateEntityCollection<MessageEntity, MessageEntityFactory>("PostedByUser", true, false, ref _postedMessages); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RoleUserEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RoleUserEntity))]
		public virtual EntityCollection<RoleUserEntity> RoleUser { get { return GetOrCreateEntityCollection<RoleUserEntity, RoleUserEntityFactory>("User", true, false, ref _roleUser); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SupportQueueThreadEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SupportQueueThreadEntity))]
		public virtual EntityCollection<SupportQueueThreadEntity> SupportQueueThreadsClaimed { get { return GetOrCreateEntityCollection<SupportQueueThreadEntity, SupportQueueThreadEntityFactory>("ClaimedByUser", true, false, ref _supportQueueThreadsClaimed); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'SupportQueueThreadEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(SupportQueueThreadEntity))]
		public virtual EntityCollection<SupportQueueThreadEntity> SupportQueueThreadsPlaced { get { return GetOrCreateEntityCollection<SupportQueueThreadEntity, SupportQueueThreadEntityFactory>("PlacedInQueueByUser", true, false, ref _supportQueueThreadsPlaced); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ThreadEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ThreadEntity))]
		public virtual EntityCollection<ThreadEntity> StartedThreads { get { return GetOrCreateEntityCollection<ThreadEntity, ThreadEntityFactory>("UserWhoStartedThread", true, false, ref _startedThreads); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ThreadSubscriptionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ThreadSubscriptionEntity))]
		public virtual EntityCollection<ThreadSubscriptionEntity> ThreadSubscription { get { return GetOrCreateEntityCollection<ThreadSubscriptionEntity, ThreadSubscriptionEntityFactory>("User", true, false, ref _threadSubscription); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ForumEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ForumEntity))]
		public virtual EntityCollection<ForumEntity> StartedThreadsInForums { get { return GetOrCreateEntityCollection<ForumEntity, ForumEntityFactory>("UsersWhoStartedThreads", false, true, ref _startedThreadsInForums); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RoleEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RoleEntity))]
		public virtual EntityCollection<RoleEntity> Roles { get { return GetOrCreateEntityCollection<RoleEntity, RoleEntityFactory>("Users", false, true, ref _roles); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ThreadEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ThreadEntity))]
		public virtual EntityCollection<ThreadEntity> ThreadsInBookmarks { get { return GetOrCreateEntityCollection<ThreadEntity, ThreadEntityFactory>("UsersWhoBookmarkedThread", false, true, ref _threadsInBookmarks); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ThreadEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ThreadEntity))]
		public virtual EntityCollection<ThreadEntity> PostedMessagesInThreads { get { return GetOrCreateEntityCollection<ThreadEntity, ThreadEntityFactory>("UsersWhoPostedInThread", false, true, ref _postedMessagesInThreads); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ThreadEntity' which are related to this entity via a relation of type 'm:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ThreadEntity))]
		public virtual EntityCollection<ThreadEntity> ThreadCollectionViaThreadSubscription { get { return GetOrCreateEntityCollection<ThreadEntity, ThreadEntityFactory>("UsersWhoSubscribedThread", false, true, ref _threadCollectionViaThreadSubscription); } }

		/// <summary>Gets / sets related entity of type 'UserTitleEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual UserTitleEntity UserTitle
		{
			get { return _userTitle; }
			set { SetSingleRelatedEntityNavigator(value, "UserTitle"); }
		}

		/// <summary>Gets / sets related entity of type 'PasswordResetTokenEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned.<br/><br/></summary>
		[Browsable(true)]
		public virtual PasswordResetTokenEntity PasswordResetToken
		{
			get { return _passwordResetToken; }
			set { SetSingleRelatedEntityNavigator(value, "PasswordResetToken"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.HnD.DALAdapter
{
	public enum UserFieldIndex
	{
		///<summary>UserID. </summary>
		UserID,
		///<summary>NickName. </summary>
		NickName,
		///<summary>Password. </summary>
		Password,
		///<summary>IsBanned. </summary>
		IsBanned,
		///<summary>IPNumber. </summary>
		IPNumber,
		///<summary>Signature. </summary>
		Signature,
		///<summary>IconURL. </summary>
		IconURL,
		///<summary>EmailAddress. </summary>
		EmailAddress,
		///<summary>UserTitleID. </summary>
		UserTitleID,
		///<summary>DateOfBirth. </summary>
		DateOfBirth,
		///<summary>Occupation. </summary>
		Occupation,
		///<summary>Location. </summary>
		Location,
		///<summary>Website. </summary>
		Website,
		///<summary>JoinDate. </summary>
		JoinDate,
		///<summary>AmountOfPostings. </summary>
		AmountOfPostings,
		///<summary>EmailAddressIsPublic. </summary>
		EmailAddressIsPublic,
		///<summary>LastVisitedDate. </summary>
		LastVisitedDate,
		///<summary>AutoSubscribeToThread. </summary>
		AutoSubscribeToThread,
		///<summary>DefaultNumberOfMessagesPerPage. </summary>
		DefaultNumberOfMessagesPerPage,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.HnD.DALAdapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: User. </summary>
	public partial class UserRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between UserEntity and AuditDataCoreEntity over the 1:n relation they have, using the relation between the fields: User.UserID - AuditDataCore.UserID</summary>
		public virtual IEntityRelation AuditDataCoreEntityUsingUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "LoggedAudits", true, new[] { UserFields.UserID, AuditDataCoreFields.UserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and BookmarkEntity over the 1:n relation they have, using the relation between the fields: User.UserID - Bookmark.UserID</summary>
		public virtual IEntityRelation BookmarkEntityUsingUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Bookmarks", true, new[] { UserFields.UserID, BookmarkFields.UserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and IPBanEntity over the 1:n relation they have, using the relation between the fields: User.UserID - IPBan.IPBanSetByUserID</summary>
		public virtual IEntityRelation IPBanEntityUsingIPBanSetByUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "IPBansSet", true, new[] { UserFields.UserID, IPBanFields.IPBanSetByUserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and MessageEntity over the 1:n relation they have, using the relation between the fields: User.UserID - Message.PostedByUserID</summary>
		public virtual IEntityRelation MessageEntityUsingPostedByUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "PostedMessages", true, new[] { UserFields.UserID, MessageFields.PostedByUserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and RoleUserEntity over the 1:n relation they have, using the relation between the fields: User.UserID - RoleUser.UserID</summary>
		public virtual IEntityRelation RoleUserEntityUsingUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RoleUser", true, new[] { UserFields.UserID, RoleUserFields.UserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and SupportQueueThreadEntity over the 1:n relation they have, using the relation between the fields: User.UserID - SupportQueueThread.ClaimedByUserID</summary>
		public virtual IEntityRelation SupportQueueThreadEntityUsingClaimedByUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SupportQueueThreadsClaimed", true, new[] { UserFields.UserID, SupportQueueThreadFields.ClaimedByUserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and SupportQueueThreadEntity over the 1:n relation they have, using the relation between the fields: User.UserID - SupportQueueThread.PlacedInQueueByUserID</summary>
		public virtual IEntityRelation SupportQueueThreadEntityUsingPlacedInQueueByUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "SupportQueueThreadsPlaced", true, new[] { UserFields.UserID, SupportQueueThreadFields.PlacedInQueueByUserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and ThreadEntity over the 1:n relation they have, using the relation between the fields: User.UserID - Thread.StartedByUserID</summary>
		public virtual IEntityRelation ThreadEntityUsingStartedByUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "StartedThreads", true, new[] { UserFields.UserID, ThreadFields.StartedByUserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and ThreadSubscriptionEntity over the 1:n relation they have, using the relation between the fields: User.UserID - ThreadSubscription.UserID</summary>
		public virtual IEntityRelation ThreadSubscriptionEntityUsingUserID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ThreadSubscription", true, new[] { UserFields.UserID, ThreadSubscriptionFields.UserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and PasswordResetTokenEntity over the 1:1 relation they have, using the relation between the fields: User.UserID - PasswordResetToken.UserID</summary>
		public virtual IEntityRelation PasswordResetTokenEntityUsingUserID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToOne, "PasswordResetToken", true, new[] { UserFields.UserID, PasswordResetTokenFields.UserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and UserTitleEntity over the m:1 relation they have, using the relation between the fields: User.UserTitleID - UserTitle.UserTitleID</summary>
		public virtual IEntityRelation UserTitleEntityUsingUserTitleID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "UserTitle", false, new[] { UserTitleFields.UserTitleID, UserFields.UserTitleID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUserRelations
	{
		internal static readonly IEntityRelation AuditDataCoreEntityUsingUserIDStatic = new UserRelations().AuditDataCoreEntityUsingUserID;
		internal static readonly IEntityRelation BookmarkEntityUsingUserIDStatic = new UserRelations().BookmarkEntityUsingUserID;
		internal static readonly IEntityRelation IPBanEntityUsingIPBanSetByUserIDStatic = new UserRelations().IPBanEntityUsingIPBanSetByUserID;
		internal static readonly IEntityRelation MessageEntityUsingPostedByUserIDStatic = new UserRelations().MessageEntityUsingPostedByUserID;
		internal static readonly IEntityRelation RoleUserEntityUsingUserIDStatic = new UserRelations().RoleUserEntityUsingUserID;
		internal static readonly IEntityRelation SupportQueueThreadEntityUsingClaimedByUserIDStatic = new UserRelations().SupportQueueThreadEntityUsingClaimedByUserID;
		internal static readonly IEntityRelation SupportQueueThreadEntityUsingPlacedInQueueByUserIDStatic = new UserRelations().SupportQueueThreadEntityUsingPlacedInQueueByUserID;
		internal static readonly IEntityRelation ThreadEntityUsingStartedByUserIDStatic = new UserRelations().ThreadEntityUsingStartedByUserID;
		internal static readonly IEntityRelation ThreadSubscriptionEntityUsingUserIDStatic = new UserRelations().ThreadSubscriptionEntityUsingUserID;
		internal static readonly IEntityRelation PasswordResetTokenEntityUsingUserIDStatic = new UserRelations().PasswordResetTokenEntityUsingUserID;
		internal static readonly IEntityRelation UserTitleEntityUsingUserTitleIDStatic = new UserRelations().UserTitleEntityUsingUserTitleID;

		/// <summary>CTor</summary>
		static StaticUserRelations() { }
	}
}
