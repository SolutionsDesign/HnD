//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.HnD.DALAdapter.HelperClasses;
using SD.HnD.DALAdapter.FactoryClasses;
using SD.HnD.DALAdapter.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Message'.<br/><br/></summary>
	[Serializable]
	public partial class MessageEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<AttachmentEntity> _attachments;
		private EntityCollection<AuditDataMessageRelatedEntity> _auditDataMessageRelated;
		private ThreadEntity _thread;
		private UserEntity _postedByUser;
		private ThreadStatisticsEntity _threadStatistics;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static MessageEntityStaticMetaData _staticMetaData = new MessageEntityStaticMetaData();
		private static MessageRelations _relationsFactory = new MessageRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Thread</summary>
			public static readonly string Thread = "Thread";
			/// <summary>Member name PostedByUser</summary>
			public static readonly string PostedByUser = "PostedByUser";
			/// <summary>Member name Attachments</summary>
			public static readonly string Attachments = "Attachments";
			/// <summary>Member name AuditDataMessageRelated</summary>
			public static readonly string AuditDataMessageRelated = "AuditDataMessageRelated";
			/// <summary>Member name ThreadStatistics</summary>
			public static readonly string ThreadStatistics = "ThreadStatistics";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class MessageEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public MessageEntityStaticMetaData()
			{
				SetEntityCoreInfo("MessageEntity", InheritanceHierarchyType.None, false, (int)SD.HnD.DALAdapter.EntityType.MessageEntity, typeof(MessageEntity), typeof(MessageEntityFactory), false);
				AddNavigatorMetaData<MessageEntity, EntityCollection<AttachmentEntity>>("Attachments", a => a._attachments, (a, b) => a._attachments = b, a => a.Attachments, () => new MessageRelations().AttachmentEntityUsingMessageID, typeof(AttachmentEntity), (int)SD.HnD.DALAdapter.EntityType.AttachmentEntity);
				AddNavigatorMetaData<MessageEntity, EntityCollection<AuditDataMessageRelatedEntity>>("AuditDataMessageRelated", a => a._auditDataMessageRelated, (a, b) => a._auditDataMessageRelated = b, a => a.AuditDataMessageRelated, () => new MessageRelations().AuditDataMessageRelatedEntityUsingMessageID, typeof(AuditDataMessageRelatedEntity), (int)SD.HnD.DALAdapter.EntityType.AuditDataMessageRelatedEntity);
				AddNavigatorMetaData<MessageEntity, ThreadEntity>("Thread", "Messages", (a, b) => a._thread = b, a => a._thread, (a, b) => a.Thread = b, SD.HnD.DALAdapter.RelationClasses.StaticMessageRelations.ThreadEntityUsingThreadIDStatic, ()=>new MessageRelations().ThreadEntityUsingThreadID, null, new int[] { (int)MessageFieldIndex.ThreadID }, null, true, (int)SD.HnD.DALAdapter.EntityType.ThreadEntity);
				AddNavigatorMetaData<MessageEntity, UserEntity>("PostedByUser", "PostedMessages", (a, b) => a._postedByUser = b, a => a._postedByUser, (a, b) => a.PostedByUser = b, SD.HnD.DALAdapter.RelationClasses.StaticMessageRelations.UserEntityUsingPostedByUserIDStatic, ()=>new MessageRelations().UserEntityUsingPostedByUserID, null, new int[] { (int)MessageFieldIndex.PostedByUserID }, null, true, (int)SD.HnD.DALAdapter.EntityType.UserEntity);
				AddNavigatorMetaData<MessageEntity, ThreadStatisticsEntity>("ThreadStatistics", "LastMessage", (a, b) => a._threadStatistics = b, a => a._threadStatistics, (a, b) => a.ThreadStatistics = b, SD.HnD.DALAdapter.RelationClasses.StaticMessageRelations.ThreadStatisticsEntityUsingLastMessageIDStatic, ()=>new MessageRelations().ThreadStatisticsEntityUsingLastMessageID, null, null, null, true, (int)SD.HnD.DALAdapter.EntityType.ThreadStatisticsEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static MessageEntity()
		{
		}

		/// <summary> CTor</summary>
		public MessageEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public MessageEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this MessageEntity</param>
		public MessageEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="messageID">PK value for Message which data should be fetched into this Message object</param>
		public MessageEntity(System.Int32 messageID) : this(messageID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="messageID">PK value for Message which data should be fetched into this Message object</param>
		/// <param name="validator">The custom validator object for this MessageEntity</param>
		public MessageEntity(System.Int32 messageID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.MessageID = messageID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected MessageEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Attachment' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAttachments() { return CreateRelationInfoForNavigator("Attachments"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'AuditDataMessageRelated' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAuditDataMessageRelated() { return CreateRelationInfoForNavigator("AuditDataMessageRelated"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Thread' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoThread() { return CreateRelationInfoForNavigator("Thread"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPostedByUser() { return CreateRelationInfoForNavigator("PostedByUser"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'ThreadStatistics' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoThreadStatistics() { return CreateRelationInfoForNavigator("ThreadStatistics"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this MessageEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static MessageRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Attachment' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAttachments { get { return _staticMetaData.GetPrefetchPathElement("Attachments", CommonEntityBase.CreateEntityCollection<AttachmentEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AuditDataMessageRelated' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAuditDataMessageRelated { get { return _staticMetaData.GetPrefetchPathElement("AuditDataMessageRelated", CommonEntityBase.CreateEntityCollection<AuditDataMessageRelatedEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Thread' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathThread { get { return _staticMetaData.GetPrefetchPathElement("Thread", CommonEntityBase.CreateEntityCollection<ThreadEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPostedByUser { get { return _staticMetaData.GetPrefetchPathElement("PostedByUser", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ThreadStatistics' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathThreadStatistics { get { return _staticMetaData.GetPrefetchPathElement("ThreadStatistics", CommonEntityBase.CreateEntityCollection<ThreadStatisticsEntity>()); } }

		/// <summary>The MessageID property of the Entity Message<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Message"."MessageID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		[Required]
		public virtual System.Int32 MessageID
		{
			get { return (System.Int32)GetValue((int)MessageFieldIndex.MessageID, true); }
			set { SetValue((int)MessageFieldIndex.MessageID, value); }
		}

		/// <summary>The PostingDate property of the Entity Message<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Message"."PostingDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.DateTime PostingDate
		{
			get { return (System.DateTime)GetValue((int)MessageFieldIndex.PostingDate, true); }
			set { SetValue((int)MessageFieldIndex.PostingDate, value); }
		}

		/// <summary>The PostedByUserID property of the Entity Message<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Message"."PostedByUserID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.Int32 PostedByUserID
		{
			get { return (System.Int32)GetValue((int)MessageFieldIndex.PostedByUserID, true); }
			set { SetValue((int)MessageFieldIndex.PostedByUserID, value); }
		}

		/// <summary>The ThreadID property of the Entity Message<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Message"."ThreadID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.Int32 ThreadID
		{
			get { return (System.Int32)GetValue((int)MessageFieldIndex.ThreadID, true); }
			set { SetValue((int)MessageFieldIndex.ThreadID, value); }
		}

		/// <summary>The PostedFromIP property of the Entity Message<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Message"."PostedFromIP".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 25.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		[StringLength(25)]
		[MinLength(2)]
		public virtual System.String PostedFromIP
		{
			get { return (System.String)GetValue((int)MessageFieldIndex.PostedFromIP, true); }
			set { SetValue((int)MessageFieldIndex.PostedFromIP, value); }
		}

		/// <summary>The ChangeTrackerStamp property of the Entity Message<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Message"."ChangeTrackerStamp".<br/>Table field type characteristics (type, precision, scale, length): Timestamp, 0, 0, 8.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.Byte[] ChangeTrackerStamp
		{
			get { return (System.Byte[])GetValue((int)MessageFieldIndex.ChangeTrackerStamp, true); }

		}

		/// <summary>The MessageText property of the Entity Message<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Message"."MessageText".<br/>Table field type characteristics (type, precision, scale, length): NText, 0, 0, 1073741823.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		[StringLength(1073741823)]
		public virtual System.String MessageText
		{
			get { return (System.String)GetValue((int)MessageFieldIndex.MessageText, true); }
			set { SetValue((int)MessageFieldIndex.MessageText, value); }
		}

		/// <summary>The MessageTextAsHTML property of the Entity Message<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Message"."MessageTextAsHTML".<br/>Table field type characteristics (type, precision, scale, length): NText, 0, 0, 1073741823.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		[StringLength(1073741823)]
		public virtual System.String MessageTextAsHTML
		{
			get { return (System.String)GetValue((int)MessageFieldIndex.MessageTextAsHTML, true); }
			set { SetValue((int)MessageFieldIndex.MessageTextAsHTML, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'AttachmentEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AttachmentEntity))]
		public virtual EntityCollection<AttachmentEntity> Attachments { get { return GetOrCreateEntityCollection<AttachmentEntity, AttachmentEntityFactory>("BelongsToMessage", true, false, ref _attachments); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'AuditDataMessageRelatedEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AuditDataMessageRelatedEntity))]
		public virtual EntityCollection<AuditDataMessageRelatedEntity> AuditDataMessageRelated { get { return GetOrCreateEntityCollection<AuditDataMessageRelatedEntity, AuditDataMessageRelatedEntityFactory>("Message", true, false, ref _auditDataMessageRelated); } }

		/// <summary>Gets / sets related entity of type 'ThreadEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual ThreadEntity Thread
		{
			get { return _thread; }
			set { SetSingleRelatedEntityNavigator(value, "Thread"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual UserEntity PostedByUser
		{
			get { return _postedByUser; }
			set { SetSingleRelatedEntityNavigator(value, "PostedByUser"); }
		}

		/// <summary>Gets / sets related entity of type 'ThreadStatisticsEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned.<br/><br/></summary>
		[Browsable(true)]
		public virtual ThreadStatisticsEntity ThreadStatistics
		{
			get { return _threadStatistics; }
			set { SetSingleRelatedEntityNavigator(value, "ThreadStatistics"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.HnD.DALAdapter
{
	public enum MessageFieldIndex
	{
		///<summary>MessageID. </summary>
		MessageID,
		///<summary>PostingDate. </summary>
		PostingDate,
		///<summary>PostedByUserID. </summary>
		PostedByUserID,
		///<summary>ThreadID. </summary>
		ThreadID,
		///<summary>PostedFromIP. </summary>
		PostedFromIP,
		///<summary>ChangeTrackerStamp. </summary>
		ChangeTrackerStamp,
		///<summary>MessageText. </summary>
		MessageText,
		///<summary>MessageTextAsHTML. </summary>
		MessageTextAsHTML,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.HnD.DALAdapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Message. </summary>
	public partial class MessageRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between MessageEntity and AttachmentEntity over the 1:n relation they have, using the relation between the fields: Message.MessageID - Attachment.MessageID</summary>
		public virtual IEntityRelation AttachmentEntityUsingMessageID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Attachments", true, new[] { MessageFields.MessageID, AttachmentFields.MessageID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MessageEntity and AuditDataMessageRelatedEntity over the 1:n relation they have, using the relation between the fields: Message.MessageID - AuditDataMessageRelated.MessageID</summary>
		public virtual IEntityRelation AuditDataMessageRelatedEntityUsingMessageID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "AuditDataMessageRelated", true, new[] { MessageFields.MessageID, AuditDataMessageRelatedFields.MessageID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MessageEntity and ThreadStatisticsEntity over the 1:1 relation they have, using the relation between the fields: Message.MessageID - ThreadStatistics.LastMessageID</summary>
		public virtual IEntityRelation ThreadStatisticsEntityUsingLastMessageID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToOne, "ThreadStatistics", true, new[] { MessageFields.MessageID, ThreadStatisticsFields.LastMessageID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MessageEntity and ThreadEntity over the m:1 relation they have, using the relation between the fields: Message.ThreadID - Thread.ThreadID</summary>
		public virtual IEntityRelation ThreadEntityUsingThreadID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Thread", false, new[] { ThreadFields.ThreadID, MessageFields.ThreadID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between MessageEntity and UserEntity over the m:1 relation they have, using the relation between the fields: Message.PostedByUserID - User.UserID</summary>
		public virtual IEntityRelation UserEntityUsingPostedByUserID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "PostedByUser", false, new[] { UserFields.UserID, MessageFields.PostedByUserID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticMessageRelations
	{
		internal static readonly IEntityRelation AttachmentEntityUsingMessageIDStatic = new MessageRelations().AttachmentEntityUsingMessageID;
		internal static readonly IEntityRelation AuditDataMessageRelatedEntityUsingMessageIDStatic = new MessageRelations().AuditDataMessageRelatedEntityUsingMessageID;
		internal static readonly IEntityRelation ThreadStatisticsEntityUsingLastMessageIDStatic = new MessageRelations().ThreadStatisticsEntityUsingLastMessageID;
		internal static readonly IEntityRelation ThreadEntityUsingThreadIDStatic = new MessageRelations().ThreadEntityUsingThreadID;
		internal static readonly IEntityRelation UserEntityUsingPostedByUserIDStatic = new MessageRelations().UserEntityUsingPostedByUserID;

		/// <summary>CTor</summary>
		static StaticMessageRelations() { }
	}
}
