//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.HnD.DALAdapter.HelperClasses;
using SD.HnD.DALAdapter.FactoryClasses;
using SD.HnD.DALAdapter.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'AuditDataCore'.<br/><br/></summary>
	[Serializable]
	public partial class AuditDataCoreEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private AuditActionEntity _auditAction;
		private UserEntity _userAudited;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static AuditDataCoreEntityStaticMetaData _staticMetaData = new AuditDataCoreEntityStaticMetaData();
		private static AuditDataCoreRelations _relationsFactory = new AuditDataCoreRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name AuditAction</summary>
			public static readonly string AuditAction = "AuditAction";
			/// <summary>Member name UserAudited</summary>
			public static readonly string UserAudited = "UserAudited";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AuditDataCoreEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AuditDataCoreEntityStaticMetaData()
			{
				SetEntityCoreInfo("AuditDataCoreEntity", InheritanceHierarchyType.TargetPerEntity, false, (int)SD.HnD.DALAdapter.EntityType.AuditDataCoreEntity, typeof(AuditDataCoreEntity), typeof(AuditDataCoreEntityFactory), false);
				AddNavigatorMetaData<AuditDataCoreEntity, AuditActionEntity>("AuditAction", "AuditDataCore", (a, b) => a._auditAction = b, a => a._auditAction, (a, b) => a.AuditAction = b, SD.HnD.DALAdapter.RelationClasses.StaticAuditDataCoreRelations.AuditActionEntityUsingAuditActionIDStatic, ()=>new AuditDataCoreRelations().AuditActionEntityUsingAuditActionID, null, new int[] { (int)AuditDataCoreFieldIndex.AuditActionID }, null, true, (int)SD.HnD.DALAdapter.EntityType.AuditActionEntity);
				AddNavigatorMetaData<AuditDataCoreEntity, UserEntity>("UserAudited", "LoggedAudits", (a, b) => a._userAudited = b, a => a._userAudited, (a, b) => a.UserAudited = b, SD.HnD.DALAdapter.RelationClasses.StaticAuditDataCoreRelations.UserEntityUsingUserIDStatic, ()=>new AuditDataCoreRelations().UserEntityUsingUserID, null, new int[] { (int)AuditDataCoreFieldIndex.UserID }, null, true, (int)SD.HnD.DALAdapter.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AuditDataCoreEntity()
		{
		}

		/// <summary> CTor</summary>
		public AuditDataCoreEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AuditDataCoreEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AuditDataCoreEntity</param>
		public AuditDataCoreEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="auditDataID">PK value for AuditDataCore which data should be fetched into this AuditDataCore object</param>
		public AuditDataCoreEntity(System.Int32 auditDataID) : this(auditDataID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="auditDataID">PK value for AuditDataCore which data should be fetched into this AuditDataCore object</param>
		/// <param name="validator">The custom validator object for this AuditDataCoreEntity</param>
		public AuditDataCoreEntity(System.Int32 auditDataID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.AuditDataID = auditDataID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AuditDataCoreEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Gets a predicateexpression which filters on this entity. Only useful in entity fetches</summary>
		/// <param name="negate">Optional flag to produce a NOT filter, (true), or a normal filter (false, default). </param>
		/// <returns>ready to use predicateexpression</returns>
		public  static IPredicateExpression GetEntityTypeFilter(bool negate=false) { return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter("AuditDataCoreEntity", negate); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'AuditAction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAuditAction() { return CreateRelationInfoForNavigator("AuditAction"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUserAudited() { return CreateRelationInfoForNavigator("UserAudited"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AuditDataCoreEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AuditDataCoreRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'AuditAction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAuditAction { get { return _staticMetaData.GetPrefetchPathElement("AuditAction", CommonEntityBase.CreateEntityCollection<AuditActionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUserAudited { get { return _staticMetaData.GetPrefetchPathElement("UserAudited", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The AuditDataID property of the Entity AuditDataCore<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditDataCore"."AuditDataID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		[Required]
		public virtual System.Int32 AuditDataID
		{
			get { return (System.Int32)GetValue((int)AuditDataCoreFieldIndex.AuditDataID, true); }
			set { SetValue((int)AuditDataCoreFieldIndex.AuditDataID, value); }
		}

		/// <summary>The AuditActionID property of the Entity AuditDataCore<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditDataCore"."AuditActionID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.Int32 AuditActionID
		{
			get { return (System.Int32)GetValue((int)AuditDataCoreFieldIndex.AuditActionID, true); }
			set { SetValue((int)AuditDataCoreFieldIndex.AuditActionID, value); }
		}

		/// <summary>The UserID property of the Entity AuditDataCore<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditDataCore"."UserID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.Int32 UserID
		{
			get { return (System.Int32)GetValue((int)AuditDataCoreFieldIndex.UserID, true); }
			set { SetValue((int)AuditDataCoreFieldIndex.UserID, value); }
		}

		/// <summary>The AuditedOn property of the Entity AuditDataCore<br/><br/></summary>
		/// <remarks>Mapped on  table field: "AuditDataCore"."AuditedOn".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		public virtual System.DateTime AuditedOn
		{
			get { return (System.DateTime)GetValue((int)AuditDataCoreFieldIndex.AuditedOn, true); }
			set { SetValue((int)AuditDataCoreFieldIndex.AuditedOn, value); }
		}

		/// <summary>Gets / sets related entity of type 'AuditActionEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual AuditActionEntity AuditAction
		{
			get { return _auditAction; }
			set { SetSingleRelatedEntityNavigator(value, "AuditAction"); }
		}

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(true)]
		public virtual UserEntity UserAudited
		{
			get { return _userAudited; }
			set { SetSingleRelatedEntityNavigator(value, "UserAudited"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.HnD.DALAdapter
{
	public enum AuditDataCoreFieldIndex
	{
		///<summary>AuditDataID. </summary>
		AuditDataID,
		///<summary>AuditActionID. </summary>
		AuditActionID,
		///<summary>UserID. </summary>
		UserID,
		///<summary>AuditedOn. </summary>
		AuditedOn,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.HnD.DALAdapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: AuditDataCore. </summary>
	public partial class AuditDataCoreRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between AuditDataCoreEntity and AuditActionEntity over the m:1 relation they have, using the relation between the fields: AuditDataCore.AuditActionID - AuditAction.AuditActionID</summary>
		public virtual IEntityRelation AuditActionEntityUsingAuditActionID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "AuditAction", false, new[] { AuditActionFields.AuditActionID, AuditDataCoreFields.AuditActionID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AuditDataCoreEntity and UserEntity over the m:1 relation they have, using the relation between the fields: AuditDataCore.UserID - User.UserID</summary>
		public virtual IEntityRelation UserEntityUsingUserID
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "UserAudited", false, new[] { UserFields.UserID, AuditDataCoreFields.UserID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AuditDataCoreEntity and AuditDataMessageRelatedEntity over the 1:1 relation they have, which is used to build a target per entity hierarchy</summary>		
		internal IEntityRelation RelationToSubTypeAuditDataMessageRelatedEntity
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateHierarchyRelation(true, new[] { AuditDataCoreFields.AuditDataID, AuditDataMessageRelatedFields.AuditDataID }); }
		}

		/// <summary>Returns a new IEntityRelation object, between AuditDataCoreEntity and AuditDataThreadRelatedEntity over the 1:1 relation they have, which is used to build a target per entity hierarchy</summary>		
		internal IEntityRelation RelationToSubTypeAuditDataThreadRelatedEntity
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateHierarchyRelation(true, new[] { AuditDataCoreFields.AuditDataID, AuditDataThreadRelatedFields.AuditDataID }); }
		}

		/// <inheritdoc/>
		public override IEntityRelation GetSubTypeRelation(string subTypeEntityName)
		{
			switch(subTypeEntityName)
			{
				case "AuditDataMessageRelatedEntity":
					return this.RelationToSubTypeAuditDataMessageRelatedEntity;
				case "AuditDataThreadRelatedEntity":
					return this.RelationToSubTypeAuditDataThreadRelatedEntity;
				default:
					return null;
			}
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAuditDataCoreRelations
	{
		internal static readonly IEntityRelation AuditActionEntityUsingAuditActionIDStatic = new AuditDataCoreRelations().AuditActionEntityUsingAuditActionID;
		internal static readonly IEntityRelation UserEntityUsingUserIDStatic = new AuditDataCoreRelations().UserEntityUsingUserID;

		/// <summary>CTor</summary>
		static StaticAuditDataCoreRelations() { }
	}
}
