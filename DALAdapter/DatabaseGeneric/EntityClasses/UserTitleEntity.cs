//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.11.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using SD.HnD.DALAdapter.HelperClasses;
using SD.HnD.DALAdapter.FactoryClasses;
using SD.HnD.DALAdapter.RelationClasses;
using System.ComponentModel.DataAnnotations;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace SD.HnD.DALAdapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'UserTitle'.<br/><br/></summary>
	[Serializable]
	public partial class UserTitleEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<UserEntity> _users;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static UserTitleEntityStaticMetaData _staticMetaData = new UserTitleEntityStaticMetaData();
		private static UserTitleRelations _relationsFactory = new UserTitleRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Users</summary>
			public static readonly string Users = "Users";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UserTitleEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UserTitleEntityStaticMetaData()
			{
				SetEntityCoreInfo("UserTitleEntity", InheritanceHierarchyType.None, false, (int)SD.HnD.DALAdapter.EntityType.UserTitleEntity, typeof(UserTitleEntity), typeof(UserTitleEntityFactory), false);
				AddNavigatorMetaData<UserTitleEntity, EntityCollection<UserEntity>>("Users", a => a._users, (a, b) => a._users = b, a => a.Users, () => new UserTitleRelations().UserEntityUsingUserTitleID, typeof(UserEntity), (int)SD.HnD.DALAdapter.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static UserTitleEntity()
		{
		}

		/// <summary> CTor</summary>
		public UserTitleEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public UserTitleEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this UserTitleEntity</param>
		public UserTitleEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="userTitleID">PK value for UserTitle which data should be fetched into this UserTitle object</param>
		public UserTitleEntity(System.Int32 userTitleID) : this(userTitleID, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="userTitleID">PK value for UserTitle which data should be fetched into this UserTitle object</param>
		/// <param name="validator">The custom validator object for this UserTitleEntity</param>
		public UserTitleEntity(System.Int32 userTitleID, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.UserTitleID = userTitleID;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UserTitleEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUsers() { return CreateRelationInfoForNavigator("Users"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this UserTitleEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UserTitleRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUsers { get { return _staticMetaData.GetPrefetchPathElement("Users", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The UserTitleID property of the Entity UserTitle<br/><br/></summary>
		/// <remarks>Mapped on  table field: "UserTitle"."UserTitleID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		[Required]
		public virtual System.Int32 UserTitleID
		{
			get { return (System.Int32)GetValue((int)UserTitleFieldIndex.UserTitleID, true); }
			set { SetValue((int)UserTitleFieldIndex.UserTitleID, value); }
		}

		/// <summary>The UserTitleDescription property of the Entity UserTitle<br/><br/></summary>
		/// <remarks>Mapped on  table field: "UserTitle"."UserTitleDescription".<br/>Table field type characteristics (type, precision, scale, length): VarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		[Required]
		[StringLength(50)]
		[MinLength(2)]
		public virtual System.String UserTitleDescription
		{
			get { return (System.String)GetValue((int)UserTitleFieldIndex.UserTitleDescription, true); }
			set { SetValue((int)UserTitleFieldIndex.UserTitleDescription, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'UserEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(UserEntity))]
		public virtual EntityCollection<UserEntity> Users { get { return GetOrCreateEntityCollection<UserEntity, UserEntityFactory>("UserTitle", true, false, ref _users); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace SD.HnD.DALAdapter
{
	public enum UserTitleFieldIndex
	{
		///<summary>UserTitleID. </summary>
		UserTitleID,
		///<summary>UserTitleDescription. </summary>
		UserTitleDescription,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace SD.HnD.DALAdapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: UserTitle. </summary>
	public partial class UserTitleRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between UserTitleEntity and UserEntity over the 1:n relation they have, using the relation between the fields: UserTitle.UserTitleID - User.UserTitleID</summary>
		public virtual IEntityRelation UserEntityUsingUserTitleID
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Users", true, new[] { UserTitleFields.UserTitleID, UserFields.UserTitleID }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUserTitleRelations
	{
		internal static readonly IEntityRelation UserEntityUsingUserTitleIDStatic = new UserTitleRelations().UserEntityUsingUserTitleID;

		/// <summary>CTor</summary>
		static StaticUserTitleRelations() { }
	}
}
